######################################################################
### Title: "Week 2 - Multiple Regression: Interactions & Other Issues"
### Course: STA 235H
### Semester: Fall 2023
### Professor: Magdalena Bennett
#######################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
# scipen=999 removes scientific notation; scipen=0 turns it on.
options(scipen = 0)
### Load libraries
# If you don't have one of these packages installed already, you will need to run install.packages() line
library(tidyverse)
library(vtable)
# Cars, cars, cars ----
cars <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week2/1_OLS/data/SoCalCars.csv", stringsAsFactors = FALSE)
## Let's clean some data
## Select only cars from the year 1970 onwards, that are under $100k, and have less than 150k miles (and more than 10k).
## Let's create new variables:
### luxury: dummy variable for luxury brands (in `luxury_brand` vector) (source: https://luxe.digital/business/digital-luxury-ranking/best-luxury-car-brands/)
### Transform price from dollars to thousands of dollars, and miles to thousands of miles.
### Transform year so that it's the number of years since 1970s
luxury_brands <- c("Audi", "BMW", "Cadillac", "Ferrari", "Jaguar", "Lamborghini", "Land Rover", "Lexus",
"Maserati", "Mercedes-Benz", "Porsche", "Rolls-Royce", "Tesla", "Volvo")
cars <- cars %>% filter(type != "new" & mileage >= 10000 & mileage <= 150000 & price < 100000 & year >= 1970) %>%
mutate(luxury = ifelse(make %in% luxury_brands, 1, 0),
price = price/1000,
mileage = mileage/1000,
year = year - 1970)
######################################################################
### Title: "Week 2 - Multiple Regression: Interactions & Other Issues"
### Course: STA 235H
### Semester: Fall 2023
### Professor: Magdalena Bennett
#######################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
# scipen=999 removes scientific notation; scipen=0 turns it on.
options(scipen = 0)
### Load libraries
# If you don't have one of these packages installed already, you will need to run install.packages() line
library(tidyverse)
library(vtable)
# Cars, cars, cars ----
cars <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week2/1_OLS/data/SoCalCars.csv", stringsAsFactors = FALSE)
## Let's clean some data
## Select only cars from the year 1970 onwards, that are under $100k, and have less than 150k miles (and more than 10k).
## Let's create new variables:
### luxury: dummy variable for luxury brands (in `luxury_brand` vector) (source: https://luxe.digital/business/digital-luxury-ranking/best-luxury-car-brands/)
### Transform price from dollars to thousands of dollars, and miles to thousands of miles.
### Transform year so that it's the number of years since 1970s
luxury_brands <- c("Audi", "BMW", "Cadillac", "Ferrari", "Jaguar", "Lamborghini", "Land Rover", "Lexus",
"Maserati", "Mercedes-Benz", "Porsche", "Rolls-Royce", "Tesla", "Volvo")
cars <- cars %>% filter(type != "New" & mileage >= 10000 & mileage <= 150000 & price < 100000 & year >= 1970) %>%
mutate(luxury = ifelse(make %in% luxury_brands, 1, 0),
price = price/1000,
mileage = mileage/1000,
year = year - 1970)
# Scatter plot price vs mileage, by luxury status
ggplot(data = cars, aes(x = mileage, y = price, color = factor(luxury))) +
geom_point() + xlab("Mileage (1,000 mi)") + ylab("Price (1,000 $)") +
theme_minimal() +
scale_color_manual("Is this car luxury?", values = c("skyblue","purple"),
labels = c("No","Yes")) +
theme(legend.position = c(0.8, 0.9))
library(AER)
data(HMDA)
graduation_dataset <- read.csv("C:/Users/mc72574/Dropbox/UT/Teaching/2023Fall_STA235H/data/graduation_dataset.csv")
View(graduation_dataset)
gpa <- read.csv("C:/Users/mc72574/Dropbox/UT/Teaching/2023Fall_STA235H/data/gpa.csv")
View(gpa)
summary(lm(gpa ~ studyweek + I(studyweek^2) + sleepnight + out, data = gpa))
summary(lm(gpa ~ studyweek + I(studyweek^2) + out, data = gpa))
cor(studyweek, gpa)
cor(gpa)
cor(gpa[,-5])
summary(gpa$studyweek)
sd(gpa$studyweek)
library(TruncatedNormal)
?rtmvnorm
studyweek = rtmvnorm(n, mean = 19.15, sigma = 12.38, lb = 2, ub = 50)
library(TruncatedNormal)
set.seed(100)
n = 1265
studyweek = rtmvnorm(n, mu = 19.15, sigma = 12.38, lb = 2, ub = 50)
12.38*(-0.17)
sleepnight = 9 - 0.17*studyweek + rtmvnorm(n, mu = 0, sigma = 1, lb = 2, ub = 2)
sleepnight = 9 - 0.17*studyweek + rtmvnorm(n, mu = 0, sigma = 1, lb = -2, ub = 2)
library(TruncatedNormal)
set.seed(100)
n = 1265
studyweek = rtmvnorm(n, mu = 19.15, sigma = 12.38, lb = 2, ub = 50)
sleepnight = 10 - 0.17*studyweek + rtmvnorm(n, mu = 0, sigma = 1, lb = -2, ub = 2)
summary(sleepnight)
summary(sleepnight[1,])
library(TruncatedNormal)
set.seed(100)
n = 1265
studyweek = rtmvnorm(n, mu = 19.15, sigma = 12.38, lb = 2, ub = 50)
sleepnight = 12 - 0.17*studyweek + rtmvnorm(n, mu = 0, sigma = 1, lb = -2, ub = 2)
summary(sleepnight[1,])
library(TruncatedNormal)
set.seed(100)
n = 1265
studyweek = rtmvnorm(n, mu = 19.15, sigma = 12.38, lb = 2, ub = 50)
sleepnight = 11 - 0.17*studyweek + rtmvnorm(n, mu = 0, sigma = 1, lb = -2, ub = 2)
summary(sleepnight[1,])
summary(gpa$oi)
summary(gpa$out)
sd(gpa$out)
goingout = rtmvnorm(n, mu = 2, sigma = 1, lb = 0, ub = 4)
library(TruncatedNormal)
set.seed(100)
n = 1265
studyweek = rtmvnorm(n, mu = 19.15, sigma = 12.38, lb = 2, ub = 50)
sleepnight = 11 - 0.17*studyweek + rtmvnorm(n, mu = 0, sigma = 1, lb = -2, ub = 2)
goingout = rtmvnorm(n, mu = 2, sigma = 1, lb = 0, ub = 4)
studyweek = studyweek[1,]
sleepnight = sleepnight[1,]
goingout = goingout[1,]
goingout = round(goingout[1,],0)
library(TruncatedNormal)
set.seed(100)
n = 1265
studyweek = rtmvnorm(n, mu = 19.15, sigma = 12.38, lb = 2, ub = 50)
sleepnight = 11 - 0.17*studyweek + rtmvnorm(n, mu = 0, sigma = 1, lb = -2, ub = 2)
goingout = rtmvnorm(n, mu = 2, sigma = 1, lb = 0, ub = 4)
studyweek = studyweek[1,]
sleepnight = sleepnight[1,]
goingout = round(goingout[1,],0)
summary(gpa$gpa)
0.01*12.38
0.05*12.38
0.5*12.38
0.1*12.38
0.2*12.38
0.3*12.38
0.01*12.38^2
0.005*12.38^2
0.2*12.38-0.005*12.38^2
0.2*12.38-0.005*12.38^2+0.1*7.8-0.01*2
0.3*12.38-0.005*12.38^2+0.1*7.8-0.01*2
0.3*12.38-0.006*12.38^2+0.1*7.8-0.01*2
sd(gpa$gpa)
min(gpa$gpa)
max(gpa$gpa)
gpa = rtmvnorm(n, mean = mean, sd = 0.336, lb = 2.5, ub = 4.67)
mean = 0.3*studyweek - 0.006*studyweek^2 + 0.1*sleepnight - 0.01*goingout
gpa = rtmvnorm(n, mu = mean, sigma = 0.336, lb = 2.5, ub = 4.67)
gpa = rtmvnorm(n, mu = mean, sigma = rep(0.336,n), lb = 2.5, ub = 4.67)
library(TruncatedNormal)
set.seed(100)
n = 1265
studyweek = rtmvnorm(n, mu = 19.15, sigma = 12.38, lb = 2, ub = 50)
sleepnight = 11 - 0.17*studyweek + rtmvnorm(n, mu = 0, sigma = 1, lb = -2, ub = 2)
goingout = rtmvnorm(n, mu = 2, sigma = 1, lb = 0, ub = 4)
studyweek = studyweek[1,]
sleepnight = sleepnight[1,]
goingout = round(goingout[1,],0)
gpa = rep(NA, n)
for(i in 1:n){
mean = 0.3*studyweek[i] - 0.006*studyweek[i]^2 + 0.1*sleepnight[i] - 0.01*goingout[i]
gpa[i] = rtmvnorm(1, mu = mean, sigma = 0.336, lb = 2.5, ub = 4.67)
}
summary(gpa)
gpa_data = data.frame(studyweek = studyweek,
sleepnight = sleepnight,
out = goingout,
gpa = gpa)
summary(lm(gpa = studyweek + I(studyweek^2) + sleepnight + out, data = gpa_data))
summary(lm(gpa ~ studyweek + I(studyweek^2) + sleepnight + out, data = gpa_data))
0.216425-2*0.004524*10
0.216 - 2*0.004
0.216 - 2*0.004*10
0.216 - 2*0.0045*10
0.21643 - 2*0.0045*10
######################################################################
### Title: "Week 3 - Outliers and Linear Probability Models"
### Course: STA 235H
### Semester: Fall 2023
### Professor: Magdalena Bennett
#######################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
# scipen=999 removes scientific notation; scipen=0 turns it on.
options(scipen = 999)
### Load libraries
# If you don't have one of these packages installed already, you will need to run install.packages() line
library(tidyverse)
library(vtable)
library(AER) #package that includes some interesting data
library(estimatr) #package to run linear regressions with robust SE
################################################################################
######################## In-Class Exercise #####################################
################################################################################
#################### EXERCISE ON YOUR OWN ######################################
## Ames Housing dataset: Data for the housing market in Ames, Iowa.
## You can check the codebook here: https://sta235.com/Classes/Week3/2_OLS_Issues/data/ames_codebook.csv
housing <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week3/2_OLS_Issues/data/AmesHousing.csv")
# Only keep single family housing: (Bldg.Type)
housing <- housing %>% filter(Bldg.Type=="1Fam")
# Create 1) a histogram for Lot Area and 2) a scatter plot between SalePrice (y) and lot area (x).
# Q) How many outliers (in terms of lot area) do you have?
ggplot(data = housing, aes(x = Lot.Area)) +
geom_histogram(color = "darkorange", fill = alpha("darkorange",0.3), bins = 100) + theme_minimal()
ggplot(data = housing, aes(y = SalePrice, x = Lot.Area)) +
geom_point(pch = 21, color = "darkorange", fill = alpha("darkorange",0.3)) + theme_minimal()
library(AER)
data(HMDA)
summary(lm_robust(deny ~ pirat + afam, data = HMDA))
######################################################################
### Title: "Week 3 - Outliers and Linear Probability Models"
### Course: STA 235H
### Semester: Fall 2023
### Professor: Magdalena Bennett
#######################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
# scipen=999 removes scientific notation; scipen=0 turns it on.
options(scipen = 999)
### Load libraries
# If you don't have one of these packages installed already, you will need to run install.packages() line
library(tidyverse)
library(vtable)
library(AER) #package that includes some interesting data
library(estimatr) #package to run linear regressions with robust SE
################################################################################
######################## In-Class Exercise #####################################
################################################################################
#################### EXERCISE ON YOUR OWN ######################################
## Ames Housing dataset: Data for the housing market in Ames, Iowa.
## You can check the codebook here: https://sta235.com/Classes/Week3/2_OLS_Issues/data/ames_codebook.csv
housing <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week3/2_OLS_Issues/data/AmesHousing.csv")
# Only keep single family housing: (Bldg.Type)
housing <- housing %>% filter(Bldg.Type=="1Fam")
# Create 1) a histogram for Lot Area and 2) a scatter plot between SalePrice (y) and lot area (x).
# Q) How many outliers (in terms of lot area) do you have?
ggplot(data = housing, aes(x = Lot.Area)) +
geom_histogram(color = "darkorange", fill = alpha("darkorange",0.3), bins = 100) + theme_minimal()
ggplot(data = housing, aes(y = SalePrice, x = Lot.Area)) +
geom_point(pch = 21, color = "darkorange", fill = alpha("darkorange",0.3)) + theme_minimal()
housing = housing %>% mutate(outlier_lot = ifelse(Lot.Area>100000, 1, 0))
housing %>% select(outlier_lot) %>% table(.)
# Chunk 1
options(scipen = 999)
library(tidyverse)
# Chunk 2
grad = read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/Homework1/data/college_grads.csv")
# Chunk 4
grad = grad %>% mutate(ShareWomen = Women/Total,
Women = Women/100,
Men = Men/100,
Total = Total/100)
ggplot(data = grad, aes(x = ShareWomen, y = Median)) +
geom_point(pch = 21, color = "darkorange", size = 3) +
xlab("Average share of women in each major") + ylab("Median earnings ($) for full-time year-round workers") +
theme_minimal()
<br>
round(exp(10.44),0)
## Let's look at data from the Current Population Survey (CPS) 1985
CPS1985 = read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week2/1_OLS/data/CPS1985_AER.csv")
### Load libraries
# If you don't have one of these packages installed already, you will need to run install.packages() line
library(tidyverse)
library(vtable)
## Let's look at data from the Current Population Survey (CPS) 1985
CPS1985 = read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week2/1_OLS/data/CPS1985_AER.csv")
CPS1985 %>%
ggplot(data = ., aes(x = wage)) + # The "." is a stand-in for whatever is piped before (in this case, the dataset). You can also just include `data = CPS1985` directly!
geom_histogram(color = "#BF3984", fill = "white", lwd = 1.5, bins = 40) +
theme_minimal()+
xlab("Wages (USD$/hr)") + ylab("Count")
CPS1985 %>% filter(gender == "female") %>%
ggplot(data = ., aes(x = wage)) + # The "." is a stand-in for whatever is piped before (in this case, the dataset)
geom_histogram(color = "#BF3984", fill = "white", lwd = 1.5, bins = 40) +
theme_minimal()+
xlab("Wages (USD$/hr)") + ylab("Count")
## Going back to our original histogram, how would you describe the distribution?
## Let's plot log(wage) now
CPS1985 %>%
ggplot(data = ., aes(x = log(wage))) + # The "." is a stand-in for whatever is piped before (in this case, the dataset)
geom_histogram(color = "#BF3984", fill = "white", lwd = 1.5, bins = 40) +
theme_minimal()+
xlab("log(Wages)") + ylab("Count")
CPS1985 <- CPS1985 %>% mutate(log_wage = log(wage)) #create a variable that is the log of wages (Note: Make sure all wages are >0!)
lm1 <- lm(log_wage ~ education + experience, data = CPS1985)
summary(lm1)
ggplot(data = CPS1985, aes(y = log_wage, x = experience)) +
geom_point(fill = "white", color = "orange", size = 3, pch = 21) +
theme_minimal()+
xlab("Experience (Years)") + ylab("log(Wage)")
CPS1985_fit <- CPS1985 %>% mutate(education = mean(education, na.rm=TRUE)) # What does na.rm do?
CPS1985_fit <- CPS1985_fit %>% mutate(log_wage_hat_lm = predict(lm1, newdata = .))
ggplot(data = CPS1985_fit, aes(y = log_wage, x = experience)) +
geom_point(fill = "white", color = "orange", size = 3, pch = 21) +
geom_line(aes(x = experience, y = log_wage_hat_lm), color = "orange", lwd = 1.1) +
theme_minimal()+
xlab("Experience (Years)") + ylab("log(Wage)")
lm_mincer <- lm(log_wage ~ education + experience + I(experience^2), data = CPS1985)
summary(lm_mincer)
0.0349403-2*0.0005362*20
## Let's look at data from the Current Population Survey (CPS) 1985
CPS1985 = read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week2/1_OLS/data/CPS1985_AER.csv")
CPS1985 %>%
ggplot(data = ., aes(x = wage)) + # The "." is a stand-in for whatever is piped before (in this case, the dataset). You can also just include `data = CPS1985` directly!
geom_histogram(color = "#BF3984", fill = "white", lwd = 1.5, bins = 40) +
theme_minimal()+
xlab("Wages (USD$/hr)") + ylab("Count")
CPS1985 %>% filter(gender == "female") %>%
ggplot(data = ., aes(x = wage)) + # The "." is a stand-in for whatever is piped before (in this case, the dataset)
geom_histogram(color = "#BF3984", fill = "white", lwd = 1.5, bins = 40) +
theme_minimal()+
xlab("Wages (USD$/hr)") + ylab("Count")
## Going back to our original histogram, how would you describe the distribution?
## Let's plot log(wage) now
CPS1985 %>%
ggplot(data = ., aes(x = log(wage))) + # The "." is a stand-in for whatever is piped before (in this case, the dataset)
geom_histogram(color = "#BF3984", fill = "white", lwd = 1.5, bins = 40) +
theme_minimal()+
xlab("log(Wages)") + ylab("Count")
CPS1985 <- CPS1985 %>% mutate(log_wage = log(wage)) #create a variable that is the log of wages (Note: Make sure all wages are >0!)
lm1 <- lm(log_wage ~ education + experience, data = CPS1985)
summary(lm1)
ggplot(data = CPS1985, aes(y = log_wage, x = experience)) +
geom_point(fill = "white", color = "orange", size = 3, pch = 21) +
theme_minimal()+
xlab("Experience (Years)") + ylab("log(Wage)")
CPS1985_fit <- CPS1985 %>% mutate(education = mean(education, na.rm=TRUE)) # What does na.rm do?
CPS1985_fit <- CPS1985_fit %>% mutate(log_wage_hat_lm = predict(lm1, newdata = .))
ggplot(data = CPS1985_fit, aes(y = log_wage, x = experience)) +
geom_point(fill = "white", color = "orange", size = 3, pch = 21) +
geom_line(aes(x = experience, y = log_wage_hat_lm), color = "orange", lwd = 1.1) +
theme_minimal()+
xlab("Experience (Years)") + ylab("log(Wage)")
lm_mincer <- lm(log_wage ~ education + experience + I(experience^2), data = CPS1985)
summary(lm_mincer)
CPS1985_fit <- CPS1985_fit %>% mutate(log_wage_hat_lq = predict(lm_mincer, newdata = .))
ggplot(data = CPS1985_fit, aes(y = log_wage, x = experience)) +
geom_point(fill = "white", color = "orange", size = 3, pch = 21) +
geom_line(aes(x = experience, y = log_wage_hat_lq), color = "orange", lwd = 1.1) +
theme_minimal()+
xlab("Experience (Years)") + ylab("log(Wage)")
housing <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week3/2_OLS_Issues/data/AmesHousing.csv")
# Only keep single family housing: (Bldg.Type)
housing <- housing %>% filter(Bldg.Type=="1Fam")
ggplot(data = housing, aes(x = Lot.Area, y = SalePrice)) +
geom_point() + theme_minimal()
housing = read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week3/2_OLS_Issues/data/AmesHousing.csv")
summary(housing$Lot.Area)
housing = housing %>% filter(Lot.Area<20000) %>%
mutate(Lot.Area = Lot.Area/1000)
ggplot(data = housing, aes(x = Lot.Area, y = SalePrice)) +
geom_point() + theme_minimal()
ggplot(data = housing, aes(x = Lot.Area, y = SalePrice)) +
geom_point(color = "skyblue4") + theme_minimal()
ggplot(data = housing, aes(x = Lot.Area, y = SalePrice)) +
geom_point(color = "skyblue3") + theme_minimal()
ggplot(data = housing, aes(x = Lot.Area, y = SalePrice)) +
geom_point(color = "pink3") + theme_minimal()
ggplot(data = housing, aes(x = Lot.Area, y = SalePrice)) +
geom_point(color = "pink3") +
geom_smooth(method = "lm", se = FALSE, color = "purple4") +
theme_minimal()
?geom_smooth
ggplot() + #COMPLETE THIS LINE
geom_point(color = "pink3") +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = "purple4") +
theme_minimal()
ggplot() + #COMPLETE THIS LINE
geom_point(color = "pink3") +
geom_smooth(formula = y ~ x + I(x^2), se = FALSE, color = "purple4") +
theme_minimal()
ggplot() + #COMPLETE THIS LINE
geom_point(color = "pink3") +
geom_smooth(method = "lm", formula = y ~ x + x^2, se = FALSE, color = "purple4") +
theme_minimal()
ggplot(data = housing, aes(x = Lot.Area, y = SalePrice)) + #COMPLETE THIS LINE
geom_point(color = "pink3") +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = "purple4") +
theme_minimal()
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week4/2_PotentialOutcomes/f2023_sta235h_6_PotentialOutcomesv2.html')
install.packages("websocket")
install.packages("websocket")
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week4/2_PotentialOutcomes/f2023_sta235h_6_PotentialOutcomesv2.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week4/2_PotentialOutcomes/f2023_sta235h_6_PotentialOutcomesv2.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week4/2_PotentialOutcomes/f2023_sta235h_6_PotentialOutcomesv2.html')
