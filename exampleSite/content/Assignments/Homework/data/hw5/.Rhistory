k_seq <- seq(1, 500,by=6)
knnr <- train(factor(Churn) ~ ., data = train.data %>% select(-customerID),
method = "knn",
preProcess = c("center","scale"),
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(k = k_seq)
)
plot(knnr)
knnr$bestTune
set.seed(100)
k_seq <- seq(1, 400,by=2)
set.seed(100)
k_seq <- seq(1, 400,by=2)
knnr <- train(factor(Churn) ~ ., data = train.data %>% select(-customerID),
method = "knn",
preProcess = c("center","scale"),
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(k = k_seq)
)
plot(knnr)
knnr$bestTune
# Accuracy for logistic model
mean(test.data$Churn==test.data$pred_logit)
# Accuracy for KNN model
pred_knn <- knnc %>% predict(., test.data)
test.data <- test.data %>% mutate(pred_knn = pred_knn)
mean(test.data$Churn==test.data$pred_knn)
set.seed(100)
k_seq <- seq(1, 400, by=2) #You can make the step larger if it's too slow.
knnc <- train(factor(Churn) ~ ., data = train.data %>% select(-customerID),
method = "knn",
preProcess = c("center","scale"),
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(k = k_seq)
)
plot(knnc)
# Accuracy for logistic model
mean(test.data$Churn==test.data$pred_logit)
# Accuracy for KNN model
pred_knn <- knnc %>% predict(., test.data)
test.data <- test.data %>% mutate(pred_knn = pred_knn)
mean(test.data$Churn==test.data$pred_knn)
tab <- round(rbind(mean(test.data$Churn==test.data$pred_logit),
mean(test.data$Churn==test.data$pred_knn)),1)
colnames(tab) <- c("Accuracy")
rownames(tab) <- c("Logit","KNN")
tab %>%
kbl() %>%
kable_paper("hover", full_width = F)
tab <- round(rbind(mean(test.data$Churn==test.data$pred_logit),
mean(test.data$Churn==test.data$pred_knn)),3)
colnames(tab) <- c("Accuracy")
rownames(tab) <- c("Logit","KNN")
tab %>%
kbl() %>%
kable_paper("hover", full_width = F)
tab <- round(rbind(mean(test.data$Churn==test.data$pred_logit)*100,
mean(test.data$Churn==test.data$pred_knn))*100,2)
colnames(tab) <- c("Accuracy (%)")
rownames(tab) <- c("Logit","KNN")
tab %>%
kbl() %>%
kable_paper("hover", full_width = F)
tab <- round(rbind(mean(test.data$Churn==test.data$pred_logit)*100,
mean(test.data$Churn==test.data$pred_knn)*100),2)
colnames(tab) <- c("Accuracy (%)")
rownames(tab) <- c("Logit","KNN")
tab %>%
kbl() %>%
kable_paper("hover", full_width = F)
test.data %>% select(Churn, pred_logit) %>% table %>% proportions(., margin = 1) %>% round(.,3)
test.data %>% select(Churn, pred_knn) %>% table %>% proportions(., margin = 1) %>% round(.,3)
telco <- telco %>% slice(sample(1:nrow(telco),1500))
write.csv(telco, file = "customer_churn_small.csv", row.names = FALSE)
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.5, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
logit <- glm(Churn ~ ., data = train.data %>% select(-customerID),
family = binomial(link = "logit"))
prob_l <- logit %>% predict(., test.data, type = "response")
test.data <- test.data %>% mutate(pred_logit = ifelse(prob_l>0.5,1,0))
test.data %>% select(Churn, pred_logit) %>% table %>% proportions(., margin = 1) %>% round(.,3)
mean(test.data$Churn==test.data$pred_logit)
set.seed(100)
k_seq <- seq(1, 400, by=2) #You can make the step larger if it's too slow.
knnc <- train(factor(Churn) ~ ., data = train.data %>% select(-customerID),
method = "knn",
preProcess = c("center","scale"),
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(k = k_seq)
)
plot(knnc)
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
logit <- glm(Churn ~ ., data = train.data %>% select(-customerID),
family = binomial(link = "logit"))
prob_l <- logit %>% predict(., test.data, type = "response")
test.data <- test.data %>% mutate(pred_logit = ifelse(prob_l>0.5,1,0))
test.data %>% select(Churn, pred_logit) %>% table %>% proportions(., margin = 1) %>% round(.,3)
mean(test.data$Churn==test.data$pred_logit)
set.seed(200)
telco <- telco %>% slice(sample(1:nrow(telco),1500))
write.csv(telco, file = "customer_churn_small.csv", row.names = FALSE)
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
logit <- glm(Churn ~ ., data = train.data %>% select(-customerID),
family = binomial(link = "logit"))
prob_l <- logit %>% predict(., test.data, type = "response")
test.data <- test.data %>% mutate(pred_logit = ifelse(prob_l>0.5,1,0))
test.data %>% select(Churn, pred_logit) %>% table %>% proportions(., margin = 1) %>% round(.,3)
mean(test.data$Churn==test.data$pred_logit)
set.seed(100)
k_seq <- seq(1, 400, by=2) #You can make the step larger if it's too slow.
knnc <- train(factor(Churn) ~ ., data = train.data %>% select(-customerID),
method = "knn",
preProcess = c("center","scale"),
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(k = k_seq)
)
plot(knnc)
knnc$bestTune
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
# This a subset of the original dataset, to make sure it runs fast enough in your computer.
telco <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw5/customer_churn_small.csv")
library(rsample)
set.seed(100)
telco_split <- initial_split(telco, prop = 0.6, strata = "Churn")
train.data <- training(telco_split)
test.data <- testing(telco_split)
train.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
test.data %>% select(Churn) %>% summarize_all(.,mean) %>% round(.,3)
logit <- glm(Churn ~ ., data = train.data %>% select(-customerID),
family = binomial(link = "logit"))
prob_l <- logit %>% predict(., test.data, type = "response")
test.data <- test.data %>% mutate(pred_logit = ifelse(prob_l>0.5,1,0))
test.data %>% select(Churn, pred_logit) %>% table %>% proportions(., margin = 1) %>% round(.,3)
mean(test.data$Churn==test.data$pred_logit)
set.seed(100)
k_seq <- seq(1, 400, by=2) #You can make the step larger if it's too slow.
knnc <- train(factor(Churn) ~ ., data = train.data %>% select(-customerID),
method = "knn",
preProcess = c("center","scale"),
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(k = k_seq)
)
plot(knnc)
set.seed(100)
k_seq <- seq(1, 320, by=2) #You can make the step larger if it's too slow.
knnc <- train(factor(Churn) ~ ., data = train.data %>% select(-customerID),
method = "knn",
preProcess = c("center","scale"),
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(k = k_seq)
)
plot(knnc)
# Accuracy for logistic model
mean(test.data$Churn==test.data$pred_logit)
# Accuracy for KNN model
pred_knn <- knnc %>% predict(., test.data)
test.data <- test.data %>% mutate(pred_knn = pred_knn)
mean(test.data$Churn==test.data$pred_knn)
tab <- round(rbind(mean(test.data$Churn==test.data$pred_logit)*100,
mean(test.data$Churn==test.data$pred_knn)*100),2)
colnames(tab) <- c("Accuracy (%)")
rownames(tab) <- c("Logit","KNN")
tab %>%
kbl() %>%
kable_paper("hover", full_width = F)
table(test.data$Contract)
library(modelsummary)
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(gender)-1,
Partner = as.numeric(Partner) - 1,
Dependents = as.numeric(Partner) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
library(modelsummary)
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
1, ifelse(Churn==1,2,NA)))
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
1, ifelse(Churn==1,2,NA)))
datasummary_balance(comparison ~ . - pred_knn - Churn, stars = TRUE, fmt = 2)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
1, ifelse(Churn==1,2,NA)))
datasummary_balance(comparison ~ . - pred_knn - Churn, data = test.data.bal, stars = TRUE, fmt = 2)
?datasummary_balance
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
1, ifelse(Churn==1,2,NA)))
datasummary_balance(comparison ~ . - pred_knn - Churn, data = test.data.bal, stars = TRUE, fmt = 2)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
1, ifelse(Churn==1,2,NA))) %>%
select(-c(pred_knn, Churn))
datasummary_balance(comparison ~ ., data = test.data.bal, stars = TRUE, fmt = 2)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
1, ifelse(Churn==1,2,NA)))
datasummary_balance(~ comparison - pred_knn - Churn, data = test.data.bal, stars = TRUE, fmt = 2)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
1, ifelse(Churn==1,2,NA))) %>%
select(-c(pred_knn, Churn))
datasummary_balance(~ comparison, data = test.data.bal, stars = TRUE, fmt = 2)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
"Wrong Unsubscriber", ifelse(Churn==1,"Actual Unsubscriber",NA))) %>%
select(-c(pred_knn, Churn))
datasummary_balance(~ factor(comparison), data = test.data.bal, stars = TRUE, fmt = 2)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
"Wrong Unsubscriber", ifelse(Churn==1,"Actual Unsubscriber",NA))) %>%
select(-c(pred_knn, Churn))
datasummary_balance(~ comparison, data = test.data.bal, stars = TRUE, fmt = 2)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
"Wrong Churn", ifelse(Churn==1,"Obs Churn",NA))) %>%
select(-c(pred_knn, Churn))
datasummary_balance(~ comparison, data = test.data.bal, stars = TRUE, fmt = 2)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
"Wrong Churn", ifelse(Churn==1,"Obs Churn",NA))) %>%
select(-c(pred_knn, Churn))
datasummary_balance(~ comparison, data = test.data.bal, stars = TRUE, fmt = 2,
dinm_statistic = "p.value")
mean(telco$Churn)
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
telco.bal <- telco %>% select(Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
datasummary_balance(~ Churn, data = test.data.bal, stars = TRUE, fmt = 2,
dinm_statistic = "p.value")
library(modelsummary)
# Select the variables we need, and transform string variables into numeric.
telco.bal <- telco %>% select(Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
datasummary_balance(~ Churn, data = telco.bal, stars = TRUE, fmt = 2,
dinm_statistic = "p.value")
# Select the variables we need, and transform string variables into numeric.
test.data.bal <- test.data %>% select(pred_knn, Churn, gender, SeniorCitizen, Partner,
Dependents, tenure, Contract, MonthlyCharges) %>%
mutate(female = as.numeric(factor(gender))-1,
Partner = as.numeric(factor(Partner)) - 1,
Dependents = as.numeric(factor(Dependents)) - 1,
Contract.month = ifelse(Contract=="Month-to-month",1,0),
Contract.1year = ifelse(Contract=="One year", 1, 0),
Contract.2year = ifelse(Contract=="Two year", 1, 0)) %>%
select(-c(gender, Contract))
#Create a variable that is 1 if is an unsubscriber in the observed data
test.data.bal <- test.data.bal %>% mutate(comparison = ifelse(pred_knn!=Churn & Churn==0,
"Wrong Churn", ifelse(Churn==1,"Obs Churn",NA))) %>%
select(-c(pred_knn, Churn))
datasummary_balance(~ comparison, data = test.data.bal, stars = TRUE, fmt = 2,
dinm_statistic = "p.value")
