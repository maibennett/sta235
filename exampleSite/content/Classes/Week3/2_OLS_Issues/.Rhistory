geom_boxplot() +
geom_vline(aes(xintercept = 5.5), color = "grey", lty = 2, lwd = 1) +
scale_color_manual(values = c(col2, col4), name = "") +
scale_fill_manual(values = c(alpha(col2, 0.3), alpha(col4, 0.3)), name = "") +
theme_bw() +
theme_ipsum_fsc() + xlab("Time period") + ylab("Outcome Y") +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm"),
panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
#panel.grid.minor.y = element_blank(),
#axis.line = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
theme(legend.position = c(0.1, 0.9))
mean_Y_treat_0
mean_Y_control_0
##############################################################
### Title: Simulations for DD
### Author: Magdalena Bennett
### Date Created: 06/27/2023
### Last edit: [06/27/2023] - Created code
##############################################################
#Clear memory
rm(list = ls())
#Clear the console
cat("\014")
library(tidyverse)
library(hrbrthemes)
library(firasans)
library(designmatch)
library(gurobi)
library(patchwork)
library(did)
##### Generate Data
# Set seed for reproducibility
set.seed(123)
sim = 100
g_raw = list()
g_match_pre = list()
g_match_post = list()
g_es_raw = list()
g_es_pre = list()
g_es_post = list()
for(s in 1:sim){
set.seed(s)
print(paste("#################### SIM:", s))
# Number of individuals and time periods
n_individuals = 1000
n_time_periods = 10
# Parameters
rho1 = 0.3  # Correlation of X for treat_ever == 1 group with time
rho2 = 0.1  # Correlation of X for treat_ever == 0 group with time
mean_Y_treat_0 = 1 # Initial mean for Y for the treat_ever == 1 group
mean_Y_control_0 = 0 # Initial mean for Y for the treat_ever == 0 group
Tau = c(rep(0, n_time_periods/2), rep(0.5, n_time_periods/2)) # Treatment effect
beta_x = 0.5
beta_y = 0.1
sd_x = 2
sd_y = 2
tols = 0.05
# Create empty data frame
data = data.frame()
# Generate panel data
for (i in 1:n_individuals) {
id = rep(i, n_time_periods)  # Individual ID
time = 1:n_time_periods  # Time period
# Covariate X (normally distributed)
X = numeric(n_time_periods)
treat_ever = sample(c(0,1), 1, prob = c(0.5, 0.5))
treat = rep(0, n_time_periods)
if (treat_ever == 1) {
for (t in 1:n_time_periods) {
X[t] = rho1 * t + rnorm(1, mean = 0, sd = sd_x)
#X[t] = rnorm(1, mean = mean_X, sd = 1)
if (t > 5) {
treat[t] = 1
}
}
} else {
for (t in 1:n_time_periods) {
X[t] = rho2 * t + rnorm(1, mean = 0, sd = sd_x)
#X[t] = rnorm(1, mean = mean_X, sd = 1)
}
}
# Outcome variable Y (normally distributed)
Y = numeric(n_time_periods)
for (t in 1:n_time_periods) {
if (t == 1 & treat_ever == 1) {
#mean_Y = rnorm(1, mean = mean_Y_treat_0, sd = 1)
mean_Y = mean_Y_treat_0
}
if (t==1 & treat_ever == 0) {
#mean_Y = rnorm(1, mean = mean_Y_control_0, sd = 1)
mean_Y = mean_Y_control_0
}
if(t>1) {
mean_Y = beta_y * Y[t - 1] + beta_x * X[t - 1] + Tau[t] * treat[t]
}
Y[t] = rnorm(1, mean = mean_Y, sd = sd_y)
}
# Combine variables into a data frame
individual_data = data.frame(id, time, Y, X, treat, treat_ever)
# Append individual data to panel data
data = rbind(data, individual_data)
}
#### Plot Data
col1 = "#003f5c"
col2 = "#58508d"
col3 = "#bc5090"
col4 = "#ff6361"
col5 = "#ffa600"
g_raw[[s]] = data %>% ggplot(data = ., aes(x = factor(time), y = Y, color = factor(treat_ever, levels = c(0,1),
labels = c("Control", "Treat")),
fill = factor(treat_ever, levels = c(0,1),
labels = c("Control", "Treat")))) +
geom_boxplot() +
geom_vline(aes(xintercept = 5.5), color = "grey", lty = 2, lwd = 1) +
scale_color_manual(values = c(col2, col4), name = "") +
scale_fill_manual(values = c(alpha(col2, 0.3), alpha(col4, 0.3)), name = "") +
theme_bw() +
theme_ipsum_fsc() + xlab("Time period") + ylab("Outcome Y") +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm"),
panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
#panel.grid.minor.y = element_blank(),
#axis.line = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
theme(legend.position = c(0.1, 0.9))
point_est = rep(NA, n_time_periods)
cih = rep(NA, n_time_periods)
cil = rep(NA, n_time_periods)
for(t in 1:n_time_periods){
ttest1 = t.test(Y ~ treat_ever, data = data[data$time==t, ], alternative = "two.sided")
point_est[t] = ttest1$estimate[2] - ttest1$estimate[1]
cil[t] = -ttest1$conf.int[2]
cih[t] = -ttest1$conf.int[1]
}
event_study_raw = data.frame(point_est = point_est,
cil = cil,
cih = cih,
time = 1:10,
sim = s)
# Ancher this at t=1
ancher = event_study_raw$point_est[event_study_raw$time==1]
event_study_raw = event_study_raw %>% mutate(point_est = point_est - ancher,
cil = cil - ancher,
cih = cih - ancher)
event_study_raw$cil[event_study_raw$time==1] = NA
event_study_raw$cih[event_study_raw$time==1] = NA
if(s==1){
event_study_raw_sim = event_study_raw
}
if(s>1){
event_study_raw_sim = event_study_raw_sim %>% add_row(event_study_raw)
}
g_es_raw[[s]] = event_study_raw %>%
ggplot(data = ., aes(x = factor(time), y = point_est)) +
geom_point(color = col4, fill = alpha(col4, 0.5), pch = 21, size = 2) +
geom_linerange(aes(ymin = cil, ymax = cih), color = col4, lwd = 0.5) +
geom_hline(aes(yintercept = 0), lty = 2, color = "grey", lwd = 0.8) +
geom_vline(aes(xintercept = 5.5), color = "grey", lty = 2, lwd = 0.8) +
theme_bw() +
theme_ipsum_fsc() + xlab("Time period") + ylab("Estimated effect") +
ggtitle("Event Study - Raw") +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm"),
panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
#panel.grid.minor.y = element_blank(),
#axis.line = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
theme(legend.position = c(0.1, 0.9))
### Matching Pre:
data_wide = pivot_wider(data = data, id_cols = id, names_from = time, values_from = c(Y, X, treat_ever)) %>%
mutate(treat = treat_ever_1) %>% dplyr::select(-starts_with("treat_ever"))
data_wide = data_wide[order(-data_wide$treat),]
t_ind = data_wide$treat
t_max_alloc = 5
d_match_pre = data.frame()
# Match with X before:
mom_covs = data_wide %>% dplyr::select(X_1, X_2, X_3, X_4, X_5) %>% as.data.frame()
mom_tols = round(absstddif(mom_covs, t_ind = t_ind, std_dif = tols), 3)
mom = list(covs = mom_covs, tols = mom_tols)
# Solver options
t_max = 60*t_max_alloc
solver = "gurobi"
approximate = 0
solver = list(name = solver, t_max = t_max, approximate = approximate, round_cplex = 0, trace_cplex = 0)
out = cardmatch(t_ind, mom = mom, solver = solver)
t_id = out$t_id
c_id = out$c_id
group_id = out$group_id
if(length(t_id)>0 & length(t_id)==length(c_id)){
prop = length(c_id)/min(table(t_ind))
d_aux = cbind(data_wide[c(t_id, c_id), ],t_id,c_id,
group_id)
d_match_pre = rbind(d_match_pre, d_aux)
cat("\n", "*************************************************", "\n", sep = "")
cat("\n", "* Matching Group and number of observations: ", sep = "")
cat("\n", "* Number of matched pairs: ", length(c_id), sep = "")
cat("\n", "* Proportion of possible pairs matched: ",round(length(c_id)/min(table(t_ind)), 3), sep="" )
cat("\n", "* Matching time (mins): ", round(out$time/60, 2), sep = "")
cat("\n", "*************************************************", "\n", sep = "")
}
### Matching Post:
data_wide = pivot_wider(data = data, id_cols = id, names_from = time, values_from = c(Y, X, treat_ever)) %>%
mutate(treat = treat_ever_1) %>% dplyr::select(-starts_with("treat_ever"))
data_wide = data_wide[order(-data_wide$treat),]
t_ind = data_wide$treat
t_max_alloc = 5
d_match_post = data.frame()
# Match with X before:
mom_covs = data_wide %>% dplyr::select(X_1, X_2, X_3, X_4, X_5, X_6) %>% as.data.frame()
mom_tols = round(absstddif(mom_covs, t_ind = t_ind, std_dif = tols), 3)
mom = list(covs = mom_covs, tols = mom_tols)
# Solver options
t_max = 60*t_max_alloc
solver = "gurobi"
approximate = 0
solver = list(name = solver, t_max = t_max, approximate = approximate, round_cplex = 0, trace_cplex = 0)
out = cardmatch(t_ind, mom = mom, solver = solver)
t_id = out$t_id
c_id = out$c_id
group_id = out$group_id
if(length(t_id)>0 & length(t_id)==length(c_id)){
prop = length(c_id)/min(table(t_ind))
d_aux = cbind(data_wide[c(t_id, c_id), ],t_id,c_id,
group_id)
d_match_post = rbind(d_match_post, d_aux)
cat("\n", "*************************************************", "\n", sep = "")
cat("\n", "* Matching Group and number of observations: ", sep = "")
cat("\n", "* Number of matched pairs: ", length(c_id), sep = "")
cat("\n", "* Proportion of possible pairs matched: ",round(length(c_id)/min(table(t_ind)), 3), sep="" )
cat("\n", "* Matching time (mins): ", round(out$time/60, 2), sep = "")
cat("\n", "*************************************************", "\n", sep = "")
}
### Plot data
d_match_pre_long = d_match_pre %>% pivot_longer(cols = c(starts_with("Y_")),
names_to = "time",
names_prefix = "Y_",
values_to = "Y",
values_drop_na = TRUE) %>%
rename(X = X_1) %>% dplyr::select(-starts_with("X_")) %>% mutate(time = as.numeric(time))
g_match_pre[[s]] = d_match_pre_long %>% ggplot(data = ., aes(x = factor(time), y = Y,
color = factor(treat, levels = c(0,1),
labels = c("Control", "Treat")),
fill = factor(treat, levels = c(0,1),
labels = c("Control", "Treat")))) +
geom_boxplot() +
geom_vline(aes(xintercept = 5.5), color = "grey", lty = 2, lwd = 1) +
scale_color_manual(values = c(col2, col4), name = "") +
scale_fill_manual(values = c(alpha(col2, 0.3), alpha(col4, 0.3)), name = "") +
theme_bw() +
theme_ipsum_fsc() + xlab("Time period") + ylab("Outcome Y") +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm"),
panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
#panel.grid.minor.y = element_blank(),
#axis.line = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
theme(legend.position = c(0.1, 0.9))
d_match_post_long = d_match_post %>% pivot_longer(cols = c(starts_with("Y_")),
names_to = "time",
names_prefix = "Y_",
values_to = "Y",
values_drop_na = TRUE) %>%
rename(X = X_1) %>% dplyr::select(-starts_with("X_")) %>% mutate(time = as.numeric(time))
g_match_post[[s]] = d_match_post_long %>% ggplot(data = ., aes(x = factor(time), y = Y,
color = factor(treat, levels = c(0,1),
labels = c("Control", "Treat")),
fill = factor(treat, levels = c(0,1),
labels = c("Control", "Treat")))) +
geom_boxplot() +
geom_vline(aes(xintercept = 5.5), color = "grey", lty = 2, lwd = 1) +
scale_color_manual(values = c(col2, col4), name = "") +
scale_fill_manual(values = c(alpha(col2, 0.3), alpha(col4, 0.3)), name = "") +
theme_bw() +
theme_ipsum_fsc() + xlab("Time period") + ylab("Outcome Y") +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm"),
panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
#panel.grid.minor.y = element_blank(),
#axis.line = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
theme(legend.position = c(0.1, 0.9))
## Event Study
## Matching pre-treat covariates
point_est = rep(NA, n_time_periods)
cih = rep(NA, n_time_periods)
cil = rep(NA, n_time_periods)
for(t in 1:n_time_periods){
ttest1 = t.test(d_match_pre_long$Y[d_match_pre_long$time==t & d_match_pre_long$treat==0],
d_match_pre_long$Y[d_match_pre_long$time==t & d_match_pre_long$treat==1],
alternative = "two.sided", paired = TRUE)
point_est[t] = -ttest1$estimate
cil[t] = -ttest1$conf.int[2]
cih[t] = -ttest1$conf.int[1]
}
event_study_pre = data.frame(point_est = point_est,
cil = cil,
cih = cih,
time = 1:10,
sim = s)
# Ancher this at t=1
ancher = event_study_pre$point_est[event_study_raw$time==1]
event_study_pre = event_study_pre %>% mutate(point_est = point_est - ancher,
cil = cil - ancher,
cih = cih - ancher)
event_study_pre$cil[event_study_pre$time==1] = NA
event_study_pre$cih[event_study_pre$time==1] = NA
if(s==1){
event_study_pre_sim = event_study_pre
}
if(s>1){
event_study_pre_sim = event_study_pre_sim %>% add_row(event_study_pre)
}
g_es_pre[[s]] = event_study_pre %>%
ggplot(data = ., aes(x = factor(time), y = point_est)) +
geom_point(color = col4, fill = alpha(col4, 0.5), pch = 21, size = 2) +
geom_linerange(aes(ymin = cil, ymax = cih), color = col4, lwd = 0.5) +
geom_hline(aes(yintercept = 0), lty = 2, color = "grey", lwd = 0.8) +
geom_vline(aes(xintercept = 5.5), color = "grey", lty = 2, lwd = 0.8) +
theme_bw() +
theme_ipsum_fsc() + xlab("Time period") + ylab("Estimated effect") +
ggtitle("Event Study -  Matching pre-treat covariates") +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm"),
panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
#panel.grid.minor.y = element_blank(),
#axis.line = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
theme(legend.position = c(0.1, 0.9))
## Matching post-treat covariates
point_est = rep(NA, n_time_periods)
cih = rep(NA, n_time_periods)
cil = rep(NA, n_time_periods)
for(t in 1:n_time_periods){
ttest1 = t.test(d_match_post_long$Y[d_match_post_long$time==t & d_match_post_long$treat==0],
d_match_post_long$Y[d_match_post_long$time==t & d_match_post_long$treat==1],
alternative = "two.sided", paired = TRUE)
point_est[t] = -ttest1$estimate
cil[t] = -ttest1$conf.int[2]
cih[t] = -ttest1$conf.int[1]
}
event_study_post = data.frame(point_est = point_est,
cil = cil,
cih = cih,
time = 1:10,
sim = s)
# Ancher this at t=1
ancher = event_study_post$point_est[event_study_raw$time==1]
event_study_post = event_study_post %>% mutate(point_est = point_est - ancher,
cil = cil - ancher,
cih = cih - ancher)
event_study_post$cil[event_study_post$time==1] = NA
event_study_post$cih[event_study_post$time==1] = NA
if(s==1){
event_study_post_sim = event_study_post
}
if(s>1){
event_study_post_sim = event_study_post_sim %>% add_row(event_study_post)
}
g_es_post[[s]] = event_study_post %>%
ggplot(data = ., aes(x = factor(time), y = point_est)) +
geom_point(color = col4, fill = alpha(col4, 0.5), pch = 21, size = 2) +
geom_linerange(aes(ymin = cil, ymax = cih), color = col4, lwd = 0.5) +
geom_hline(aes(yintercept = 0), lty = 2, color = "grey", lwd = 0.8) +
geom_vline(aes(xintercept = 5.5), color = "grey", lty = 2, lwd = 0.8) +
theme_bw() +
theme_ipsum_fsc() + xlab("Time period") + ylab("Estimated effect") +
ggtitle("Event Study - Matching post-treat covariates") +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm"),
panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
#panel.grid.minor.y = element_blank(),
#axis.line = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
theme(legend.position = c(0.1, 0.9))
}
hmda <- hmda %>% mutate(deny = as.numeric(deny) - 1)
library(ggplot2)
library(hrbrthemes)
library(firasans)
library(modelsummary)
library(AER)
data("HMDA")
hmda <- data.frame(HMDA)
hmda <- hmda %>% mutate(deny = as.numeric(deny) - 1)
ggplot(data = hmda, aes(x = pirat, y = deny)) +
geom_point(color = "#5601A4", fill = alpha("#5601A4",0.4), pch=21, size = 3)+
geom_smooth(method = "lm", color = "#BF3984", se = FALSE, lty = 1, lwd = 1.3) +
geom_hline(aes(yintercept = 0), color="dark grey", lty = 2, lwd=1)+
geom_hline(aes(yintercept = 1), color="dark grey", lty = 2, lwd=1)+
ggplot2::annotate("text", x = 2.3, y = 1.1, label = "Mortgage denied", size = 4, colour = "dark grey", hjust=0,family="Fira Sans Condensed") +
ggplot2::annotate("text", x = 2.3, y = 0.1, label = "Mortgage approved", size = 4, colour = "dark grey", hjust=0,family="Fira Sans Condensed") +
theme_bw()+
xlab("Payment/Income ratio") + ylab("Deny") +
#ggplot2::annotate("text", x = 10, y = 6, label = "Adj. R2 = 0.48", size = 6, colour = "dark grey", hjust=0,family="Fira Sans Condensed") +
theme_bw()+
theme_ipsum_fsc(plot_title_face = "bold",plot_title_size = 24) + #plain
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=18),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size=14),
axis.title.y = element_text(size=18),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size=14),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
library(AER)
data("HMDA")
hmda <- data.frame(HMDA)
setwd("C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week3/2_OLS_Issues")
write.csv(hmda, file = "hmda.csv", row.names = FALSE)
hmda = read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week3/2_OLS_Issues/data/hmda.csv")
hmda <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week3/2_OLS_Issues/data/hmda_2017_austin_bastrop.csv", stringsAsFactors = FALSE)
ggplot(data = hmda, aes(x = loan_amount_000s)) +
geom_histogram(color = "skyblue3", fill = "skyblue", lwd = 1.1) +
xlab("Loan amount (1,000 US$)") +
theme_minimal()
ggplot(data = hmda, aes(x = applicant_income_000s, y = loan_amount_000s)) +
geom_point(color = "skyblue3") +
theme_minimal() +
xlab("Applicant's income (M US$)") + ylab("Loan Amount (M US$)")
ggplot(data = hmda, aes(x = applicant_income_000s, y = loan_amount_000s)) +
geom_point(color = "skyblue3") +
theme_minimal() +
xlab("Applicant's income (M US$)") + ylab("Loan Amount (M US$)") +
geom_smooth(method = "lm", se = FALSE, color = "blue", lwd = 1.1)
hmda <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week3/2_OLS_Issues/data/hmda_2017_austin_bastrop.csv", stringsAsFactors = FALSE)
hmda <- hmda %>% filter(action_taken==1 & loan_purpose == 1) #complete this
ggplot(data = hmda, aes(x = loan_amount_000s)) +
geom_histogram(color = "skyblue3", fill = "skyblue", lwd = 1.1) +
xlab("Loan amount (1,000 US$)") +
theme_minimal()
ggplot(data = hmda, aes(x = applicant_income_000s, y = loan_amount_000s)) +
geom_point(color = "skyblue3") +
theme_minimal() +
xlab("Applicant's income (M US$)") + ylab("Loan Amount (M US$)")
ggplot(data = hmda, aes(x = applicant_income_000s, y = loan_amount_000s)) +
geom_point(color = "skyblue3") +
theme_minimal() +
xlab("Applicant's income (M US$)") + ylab("Loan Amount (M US$)") +
geom_smooth(method = "lm", se = FALSE, color = "blue", lwd = 1.1)
## Exclude both income outliers
hmda_without_outliers <- hmda %>% filter(applicant_income_000s<700)
ggplot(data = hmda, aes(x = applicant_income_000s, y = loan_amount_000s)) +
geom_point(color = "skyblue3") +
theme_minimal() +
xlab("Applicant's income (M US$)") + ylab("Loan Amount (M US$)") +
geom_smooth(method = "lm", se = FALSE, color = "blue", lwd = 1.1) +
geom_smooth(data = hmda_without_outliers,
aes(x = applicant_income_000s, y = loan_amount_000s),
method = "lm",
se = FALSE,
color = "purple")
## Exclude only loan outlier
hmda_without_outliers <- hmda %>% filter(loan_amount_000s<750)
ggplot(data = hmda, aes(x = applicant_income_000s, y = loan_amount_000s)) +
geom_point(color = "skyblue") +
theme_minimal() +
xlab("Applicant's income (1,000 US$)") + ylab("Loan Amount (1,000 US$)") +
geom_smooth(method = "lm", se = FALSE, color = "blue", lwd = 1.1) +
geom_smooth(data = hmda_without_outliers,
aes(x = applicant_income_000s, y = loan_amount_000s),
method = "lm",
se = FALSE,
color = "purple")
ggplot(data = hmda, aes(x = applicant_income_000s, y = loan_amount_000s)) +
geom_point(color = "skyblue") +
theme_minimal() +
xlab("Applicant's income (1,000 US$)") + ylab("Loan Amount (1,000 US$)") +
geom_smooth(aes(color = "linear fit"), method = "lm", se = FALSE, lwd = 1.1) +
geom_smooth(data = hmda %>% filter(loan_amount_000s<750),
aes(x = applicant_income_000s, y = loan_amount_000s,
color = "linear fit w/o outliers"),
method = "lm",
se = FALSE) +
scale_color_manual(values = c("blue", "purple"), name = "Regression lines")
hmda <- hmda %>% mutate(outlier = ifelse(loan_amount_000s>750, 1, 0))
hmda %>% select(outlier) %>% table(.)
hmda %>% dplyr::select(outlier) %>% table(.)
housing <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week3/2_OLS_Issues/data/AmesHousing.csv")
housing <- housing %>% filter(Bldg.Type=="1Fam")
lm_full <- lm(SalePrice ~ TotRms.AbvGrd + Gr.Liv.Area + Garage.Cars + Fireplaces + Total.Bsmt.SF, data = housing)
summary(lm_full)
lm_size <- lm(SalePrice ~ TotRms.AbvGrd + Gr.Liv.Area , data = housing)
summary(lm_size)
ggplot(data = housing, aes(x = TotRms.AbvGrd, y = Gr.Liv.Area)) +
geom_point(color = "skyblue") +
geom_smooth(color = "purple", fill = alpha("purple", 0.2), method = "lm") +
theme_minimal() +
xlab("Total Number of Rooms") + ylab("Living Area (Sq Ft)")
summary(lm(Gr.Liv.Area ~ TotRms.AbvGrd, data = housing))
housing %>% select(Gr.Liv.Area, TotRms.AbvGrd) %>% cor(.)
