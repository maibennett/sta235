library(rddensity) # We will be using this package a lot next class (the same with rdrobust)
rd <- rddensity(sales_mod$time, c=c) # First we test the smoothness of the density function in the cutoff
rdplotdensity(rd, sales_mod$time) # we can plot this
# Let's look at the densities! We want to see if there's manipulation
library(rddensity) # We will be using this package a lot next class (the same with rdrobust)
rd <- rddensity(sales$time, c=c) # First we test the smoothness of the density function in the cutoff
rdplotdensity(rd, sales$time) # we can plot this
summary(rd)
################################################################################
### Title: "Week 7 - Regression Discontinuity I"
### Course: STA 235
### Semester: Spring 2021
### Professor: Magdalena Bennett
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
### Load libraries
# If you don't have one of these packages installed already, you will need to
#run install.packages() line
library(tidyverse)
library(ggplot2)
library(estimatr)
library(broom)
################################################################################
################ In class examples #############################################
################ Discount by time of arrival ###################################
######################
## Group 1 ###########
######################
# You receive the sales data for the sales example we saw a couple of weeks ago
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
# Check out the data
head(sales)
# id: identification for each person
# time: time of arrival, since the store opened
# age: age of the person
# female: whether the customer is female or not
# income: average income for the customer
# sales: amount of the purchase
# treat: whether the person received a discount or not (e.g. was within the first 1,000 customers)
# Task 1) Create a plot with the running variable in the x-axis and the treatment variable in the y-axis.
# Questions to answer:
# i) What is the running variable? Can you obtain the cutoff for treatment assignment?
# ii) What does this plot tells you?
# Task 2) Identify your cutoff score and assign it to c <-
# Add to your previous plot a fitted smooth line for each side of the cutoff adding to your previous code the following:
# geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red")
# and geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
# This is the plot you had to do
ggplot(data = sales, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
# If you don't want all markers to be aligned in the same line (it can be difficult to observe),
# you can add a random jitter (move them slightly up and down), so you can see more of the data.
# This is a good trick for any time you have data on the same line.
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = max(sales$time[sales$treat==1])
pos = position_jitter(width = 0, height = 0.1, seed = 1234) #I only move them slightly (0.1) up and down. I set a seed so it's reproducible.
ggplot(data = sales, aes(x = time, y = treat)) +
geom_point(data = filter(sales, time<=c), size = 5, pch = 21, color = "white", fill="#900DA4", position = pos) + #I filter the data so I can color units below and above the cutoff
geom_point(data = filter(sales, time>c), size = 5, pch = 21, color = "white", fill="#F89441", position = pos) +
theme_bw()
# Question: If you don't want to use the filter function, can you create this same plot using other techniques we have seen?
######################
## Group 2 ###########
######################
# Task 1) Create a plot with the running variable in the x-axis and sales in the y-axis.
# Questions to answer:
# i) What is the running variable? Can you obtain the cutoff for treatment assignment from your data?
# ii) What does this plot tells you?
# Task 2) Identify your cutoff score and assign it to c <-
# Add to your previous plot a fitted smooth line for each side of the cutoff adding to your previous code the following:
# geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red")
# and geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
# This is the plot that was asked
ggplot(data = sales, aes(x = time, y = sales)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
######################
## Group 3 ###########
######################
# Task 1) Create a plot with the running variable in the x-axis and income in the y-axis.
# Questions to answer:
# i) What is the running variable? Can you obtain the cutoff for treatment assignment from your data?
# ii) What does this plot tells you?
# Task 2) Identify your cutoff score and assign it to c <-
# Add to your previous plot a fitted smooth line for each side of the cutoff adding to your previous code the following:
# geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red")
# and geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = sales, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
######################
## Group 4 ###########
######################
# You receive the sales data for the sales example we saw a couple of weeks ago
sales_mod <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales_mod.csv")
# The difference here is that the discount was given to all the customers that arrived before noon (the store opened at 9.00am)
c = 180
ggplot(data = sales_mod, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
# Question: If there's a discontinuity here, is it a problem? Why?
# Question: Can you do the same thing for age? What do you find?
# Let's look at the densities! We want to see if there's manipulation
library(rddensity) # We will be using this package a lot next class (the same with rdrobust)
rd <- rddensity(sales_mod$time, c=180) # First we test the smoothness of the density function in the cutoff
rdplotdensity(rd, sales_mod$time) # we can plot this
# Let's look at the other example, to see if there's manipulation there:
rd <- rddensity(sales$time, c=max(sales$time[sales$treat==1]))
summary(rd)
rd <- rddensity(sales_mod$time, c=180) # First we test the smoothness of the density function in the cutoff
summary(rd)
ggplot(data = sales, aes(x = time)) +
geom_histogram(fill="grey", color = "white", bins = 70) + #This is giving the frequency of people arriving within each "bin" of time. I also set the histogram to have 60 bins (60 groups of time within our time period)
geom_vline(aes(xintercept = 180), color = "#900DA4", lwt=2, lwd=1.4) +
theme_bw()
sales_close <- sales %>% filter(distance>= -100 & distance <= 100)
sales_close <- sales %>% filter(dist >= -100 & dist <= 100)
lm1_close <- lm(sales ~ dist + treat + dist*treat, data = sales_close) # let's fit the linear model...
lm2_close <- lm(sales ~ dist + I(dist^2) + treat + dist*treat + treat*I(dist^2), data = sales_close) #... and the quadratic model using only data close to the cutoff.
?filter
# We will use the same example and check two different specifications:
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = min(sales$time[sales$treat==0])
sales <- sales %>% mutate(dist = c-time) # We are going to create a distance variable (distance to the cutoff)
lm1 <- lm(sales ~ dist + treat + dist*treat, data = sales) # Then we will fit a linear model, allowing for different intercept and slopes for the two groups.
sales_aug <- broom::augment(lm1, data = sales)
ggplot(data = sales_aug, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") +
geom_line(data = dplyr::filter(sales_aug, time>c), aes(x = time, y = .fitted), color = "#F89441", lwd = 2) +
geom_line(data = dplyr::filter(sales_aug, time<=c), aes(x = time, y = .fitted), color = "#900DA4", lwd = 2) +
theme_bw()
summary(lm1)
# Now let's fit a quadratic model!
lm2 <- lm(sales ~ dist + I(dist^2) + treat + dist*treat + treat*I(dist^2), data = sales) # Remember that we need to include both the linear and quadratic term of the running variable
sales_aug <- broom::augment(lm2, data = sales)
ggplot(data = sales_aug, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") +
geom_line(data = dplyr::filter(sales_aug, time>c), aes(x = time, y = .fitted), color = "#F89441", lwd = 2) +
geom_line(data = dplyr::filter(sales_aug, time<=c), aes(x = time, y = .fitted), color = "#900DA4", lwd = 2) +
theme_bw()
summary(lm2)
# Question: What differences do you see in both plots? Which one should you believe?
# Now let's do the same but for a specific bandwidth [-100,100] in terms of distance to the cutoff.
sales_close <- sales %>% dplyr::filter(dist >= -100 & dist <= 100)
lm1_close <- lm(sales ~ dist + treat + dist*treat, data = sales_close) # let's fit the linear model...
lm2_close <- lm(sales ~ dist + I(dist^2) + treat + dist*treat + treat*I(dist^2), data = sales_close) #... and the quadratic model using only data close to the cutoff.
library(modelsummary) #let's put everything in one table
modelsummary(list(lm1, lm2, lm1_close, lm2_close), stars = TRUE, gof_omit = 'DF|Deviance|R2|AIC|BIC|Log.Lik.') #Include all four previous models, include stars for significance, and omit certain GOF statistics to make the table less crowded.
rdplot(y = sales$sales, x = sales$time, c = c, title = "RD plot",
x.label = "time", y.label = "sales", col.dots = "#F89441", col.lines = "#900DA4") # We can change the colors of the markers and line.
summary(rdrobust(y = sales$sales, x = sales$time, c = c))
?geom_ribbon
data <- data.frame(u = c(0,0,1,1,1,0,0),
t = c(0,0,0.5,1,0.5,0,0),
r = c(-3,-2,-1,0,1,2,3))
ggplot(data = data, aes(x = r, y = u)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -1), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 1), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel")
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
ggplot(data = data, aes(x = r, y = u)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -1), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 1), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel") +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
ggplot(data = data, aes(x = r, y = t)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -1), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 1), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel") +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
data <- data.frame(u = c(0,0,0,1,1,1,0,0,0),
t = c(0,0,0.5,0.5,1,0.5,0.5,0,0),
r = c(-3,-2,-2,-1,0,1,2,2,3))
ggplot(data = data, aes(x = r, y = u)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel") +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
ggplot(data = data, aes(x = r, y = t)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel") +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
data <- data.frame(u = c(0,0,1,1,1,1,1,0,0),
t = c(0,0,0,0.5,1,0.5,0,0,0),
r = c(-3,-2,-2,-1,0,1,2,2,3))
g1 <- ggplot(data = data, aes(x = r, y = u)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel") +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
g1
g2 <- ggplot(data = data, aes(x = r, y = t)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel") +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
g2
library(patchwork)
data <- data.frame(u = c(0,0,1,1,1,1,1,0,0),
t = c(0,0,0,0.5,1,0.5,0,0,0),
r = c(-3,-2,-2,-1,0,1,2,2,3))
g1 <- ggplot(data = data, aes(x = r, y = u)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -2.05), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 2.05), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel") +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
g2 <- ggplot(data = data, aes(x = r, y = t)) +
geom_line(color = "#F89441", lwd = 2) +
geom_vline(aes(xintercept = -2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 2), lwd = 1.5, color = "#E16462", lty = 2) +
geom_vline(aes(xintercept = 0), lwd = 1.2, color = "dark grey", lty = 2) +
theme_ipsum_fsc() +
xlab("Running variable") + ylab("Weights") + ggtitle("Uniform Kernel") +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
g1 + g2
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_10_regression_discontinuity_cont.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_10_regression_discontinuity_cont.html', wait = 20)
?chrome_print
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_10_regression_discontinuity_cont.html', wait = 30, timeout = 50)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_10_regression_discontinuity_cont.html', wait = 30, timeout = 120)
install.packages("ggdag")
.box-t[Z → X → Y &emsp; Z &nrarr; Y &emsp; Cor(Z, Y | X) = 0]
--
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_10_regression_discontinuity_cont.html', wait = 30, timeout = 120)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_10_regression_discontinuity_cont.html', wait = 30, timeout = 120)
d <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week4/1_RCT/data/voters_covariates.csv")
# Drop variables with unlisted phone numbers
d_s1 <- d[!is.na(d$treat_real),]
table(d_s1$treat_real, d_1$contact)
d_s1 %>% group_by(treat_real) %>% summarise(contact)
?group_by
table(d_s1$treat_real, d_s1$contact)
d_s1 %>% group_by(treat_real) %>% summarise(contact = mean(contact))
library(estimatr)
summary(estimatr::lm_robust(contact ~ treat_real, data = d_s1))
d_s1_augment <- broom::augment(lm_robust(contact ~ treat_real, data = d_s1))
lm1 <- estimatr::lm_robust(contact ~ treat_real, data = d_s1)
summary(lm1)
d_s1_augment <- d_s1 %>% mutate(contact_fitted = predict(lm1))
generics::augment(lm1, data = d_s1)
d_s1$contact_fitted = predict(lm1)
d_s1$contact_fitted = predict(lm1, data = d_s1)
?predict
?predict_lm
ppredict.lm())
?predict.lm
?lm_robust_fit
?lm_robust
head(lm1$fitted.values)
d_s1$contact_fitted = lm1$fitted.values
summary(estimatr::lm_robust(vote02 ~ contact_fitted, data = d_s1))
summary(estimatr::lm_robust(vote02 ~ treat_real, data = d_s1))
lm2 <- estimatr::lm_robust(vote02 ~ contact_fitted, data = d_s1)
summary(lm2)
lm2 <- summary(estimatr::lm_robust(vote02 ~ treat_real, data = d_s1))
summary(lm2)
lm2$coefficients[1,2]/lm1$coefficients[1,2]
lm2 <- estimatr::lm_robust(vote02 ~ treat_real, data = d_s1)
summary(lm2)
lm2$coefficients[1,2]/lm1$coefficients[1,2]
lm2$coefficients
lm2$coefficients[2]/lm1$coefficients[2]
install.packages("ivreg")
library(ivreg)
model_ivreg <- ivreg(vote02 ~ contact | treat_real, data = d_s1)
summary(model_ivreg)
?rdrobust
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
library(tidyverse)
library(broom)
library(ggdag)
library(kableExtra)
library(scales)
library(patchwork)
library(estimatr)
library(rdrobust)
# Fake program data
set.seed(1234)
num_students <- 1000
tutoring <- tibble(
id = 1:num_students,
entrance_exam = rbeta(num_students, shape1 = 7, shape2 = 2),
exit_exam_base = rbeta(num_students, shape1 = 5, shape2 = 3)
) %>%
mutate(entrance_exam = entrance_exam * 100) %>%
mutate(tutoring_sharp = entrance_exam <= 70) %>%
mutate(tutoring_fuzzy = case_when(
entrance_exam >= 50 & entrance_exam <= 70 ~ sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(0.8, 0.2)),
entrance_exam > 70 & entrance_exam <= 90 ~ sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(0.2, 0.8)),
entrance_exam < 50 ~ TRUE,
entrance_exam > 90 ~ FALSE
)) %>%
mutate(tutoring_text = factor(tutoring_sharp, levels = c(FALSE, TRUE),
labels = c("No tutor", "Tutor")),
tutoring_fuzzy_text = factor(tutoring_fuzzy, levels = c(FALSE, TRUE),
labels = c("No tutor", "Tutor"))) %>%
mutate(exit_exam = exit_exam_base * 40 + 10 * tutoring_sharp + entrance_exam / 2) %>%
mutate(exit_exam_fuzzy = exit_exam_base * 40 + 10 * tutoring_fuzzy + entrance_exam / 2) %>%
mutate(entrance_centered = entrance_exam - 70) %>%
mutate(below_cutoff = entrance_exam <= 70)
tutoring <- tutoring %>%
select(id, entrance_exam, tutoring = tutoring_fuzzy,
tutoring_text = tutoring_fuzzy_text, exit_exam = exit_exam_fuzzy)
tutoring <- tutoring %>% mutate(distance = entrance_exam - 70,
below_cutoff = entrance_exam <= 70)
summary(iv_robust(exit_exam ~ distance + tutoring + distance*tutoring | distance + below_cutoff,
data = filter(tutoring, distance >= -10 & distance <= 10)))
tutoring <- tutoring %>% mutate(distance = entrance_exam - 70,
below_cutoff = entrance_exam <= 70)
summary(iv_robust(exit_exam ~ distance + tutoring | distance + below_cutoff,
data = filter(tutoring, distance >= -10 & distance <= 10)))
summary(rdrobust(y = tutoring$exit_exam, x = tutoring$distance, c = 0, fuzzy = tutoring$tutoring))
library(tidyverse)
library(broom)
library(ggdag)
library(kableExtra)
library(scales)
library(patchwork)
library(estimatr)
library(rdrobust)
# Fake program data
set.seed(1234)
num_students <- 1000
tutoring <- tibble(
id = 1:num_students,
entrance_exam = rbeta(num_students, shape1 = 7, shape2 = 2),
exit_exam_base = rbeta(num_students, shape1 = 5, shape2 = 3)
) %>%
mutate(entrance_exam = entrance_exam * 100) %>%
mutate(tutoring_sharp = entrance_exam <= 70) %>%
mutate(tutoring_fuzzy = case_when(
entrance_exam >= 50 & entrance_exam <= 70 ~ sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(0.8, 0.2)),
entrance_exam > 70 & entrance_exam <= 90 ~ sample(c(TRUE, FALSE), n(), replace = TRUE, prob = c(0.2, 0.8)),
entrance_exam < 50 ~ TRUE,
entrance_exam > 90 ~ FALSE
)) %>%
mutate(tutoring_text = factor(tutoring_sharp, levels = c(FALSE, TRUE),
labels = c("No tutor", "Tutor")),
tutoring_fuzzy_text = factor(tutoring_fuzzy, levels = c(FALSE, TRUE),
labels = c("No tutor", "Tutor"))) %>%
mutate(exit_exam = exit_exam_base * 40 + 10 * tutoring_sharp + entrance_exam / 2) %>%
mutate(exit_exam_fuzzy = exit_exam_base * 40 + 10 * tutoring_fuzzy + entrance_exam / 2) %>%
mutate(entrance_centered = entrance_exam - 70) %>%
mutate(below_cutoff = entrance_exam <= 70)
tutoring <- tutoring %>%
select(id, entrance_exam, tutoring = tutoring_fuzzy,
tutoring_text = tutoring_fuzzy_text, exit_exam = exit_exam_fuzzy)
setwd("C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/2_IV")
write.csv(tutoring, file = "tutoring.csv", row.names = FALSE)
tutoring <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week8/2_IV/data/tutoring.csv")
# Check out the data
head(tutoring)
?rdrobust_RDsenate
read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week8/2_IV/data/tutoring.csv")
rdplot(y = tutoring$tutoring, x = tutoring$entrance_exam, c = 70, title = "RD plot",
x.label = "Entrance exam", y.label = "Pr(tutoring)", col.dots = "#F89441", col.lines = "#900DA4")
summary(rdrobust(y = tutoring$exit_exam, x = tutoring$entrance_exam, c = 70))
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_10_regression_discontinuity_cont_blind.html', timeout = 120)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_10_regression_discontinuity_cont.html', timeout = 120)
library(tidyverse)
library(broom)
library(ggdag)
library(kableExtra)
library(scales)
library(patchwork)
library(estimatr)
tutoring <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week8/2_IV/data/tutoring.csv")
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/1_RD/sp2021_sta235_11_instrumental_variables.html', timeout = 500)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/2_IV/sp2021_sta235_11_instrumental_variables.html', timeout = 500)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/2_IV/sp2021_sta235_11_instrumental_variables.html', timeout = 500)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week8/2_IV/sp2021_sta235_11_instrumental_variables.html', timeout = 500)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week11/1_shrinkage/sp2021_sta235_13_shrinkage.html', timeout = 10)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week11/2_KNearest/sp2021_sta235_14_knn.html', timeout = 10)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week11/1_shrinkage/sp2021_sta235_13_shrinkage.html', timeout = 10)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week11/1_shrinkage/sp2021_sta235_13_shrinkage.html', timeout = 10)
agedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week10/2_ModelSelection/sp2021_sta235_12_modelselection.html', timeout = 10)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week10/2_ModelSelection/sp2021_sta235_12_modelselection.html', timeout = 10)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week10/2_ModelSelection/sp2021_sta235_12_modelselection.html', timeout = 10)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week11/2_KNearest/sp2021_sta235_14_knn.html', timeout = 10)
