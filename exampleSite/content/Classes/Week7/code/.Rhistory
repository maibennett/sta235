id = seq(1,2000)
treat = c(rep(1,1000),rep(0,1000))
time = purrr::accumulate(1:2000, ~ .x +runif(1,0,0.5), .init = 1.05)[-2001]
age = 44.59 - time^2*0.0008392 + 0.3905*time + rnorm(2000,0,15)
age = round(rescale(age,to= c(16,84)),0)
female = sample(c(0,1), replace = TRUE, size = 2000, prob = c(0.3,0.7))
income = age*1400 + rnorm(2000,0,10000)
income[income<0] = runif(sum(income<0),10000,20000)
sales = 125 + treat*30*(1 + -(time-250)*0.005) + (income-50000)*0.00125 + rnorm(2000,0,10)
d = data.frame("id" = id,
"time" = time,
"age" = age,
"female" = female,
"income" = income,
"sales" = sales,
"treat" = treat)
ggplot(data = d, aes(x = time, y = treat)) +
geom_point()
ggplot(data = d, aes(x = time, y = sales)) +
geom_point()
rdplot(sales,time,c=259.6752)
ggplot(data = d, aes(x = time, y = sales)) +
geom_point()
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
treat = c(rep(1,1000),rep(0,1000))
time = purrr::accumulate(1:2000, ~ .x +runif(1,0,0.5), .init = 1.05)[-2001]
age = 44.59 - time^2*0.0008392 + 0.3905*time + rnorm(2000,0,15)
age = round(rescale(age,to= c(16,84)),0)
female = sample(c(0,1), replace = TRUE, size = 2000, prob = c(0.3,0.7))
income = age*1400 + rnorm(2000,0,10000)
income[income<0] = runif(sum(income<0),10000,20000)
sales = 125 + treat*30*(1 + -(time-259.6752)*0.005) + (income-50000)*0.00125 + rnorm(2000,0,10)
d = data.frame("id" = id,
"time" = time,
"age" = age,
"female" = female,
"income" = income,
"sales" = sales,
"treat" = treat)
ggplot(data = d, aes(x = time, y = treat)) +
geom_point()
ggplot(data = d, aes(x = time, y = sales)) +
geom_point()
rdplot(sales,time,c=259.6752)
write.csv(d, file = "sales.csv", row.names = FALSE)
head(d)
ggplot(data = d, aes(x = time, y = income)) +
geom_point()
ggplot(data = d, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, max(time[treat==1])), method = "loess", se=TRUE)
ggplot(data = d, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE)
c=259
ggplot(data = d, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE)
ggplot(data = d, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = sales)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
60*3
time
time = purrr::accumulate(1:691, ~ .x +runif(1,0,0.5), .init = 1.05)
time
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:700, ~ .x +runif(1,0,0.5), .init = 1.05)
time
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:692, ~ .x +runif(1,0,0.5), .init = 1.05)
time
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:690, ~ .x +runif(1,0,0.5), .init = 1.05)
time
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:680, ~ .x +runif(1,0,0.5), .init = 1.05)
time
time2 = order(runif(80,176,180))
ttime
time2
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:680, ~ .x +runif(1,0,0.5), .init = 1.05)
time2 = sort(runif(80,176,180))
time2
l = 2000-length(time) + length(time2)
l
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:680, ~ .x +runif(1,0,0.5), .init = 1.05)
time2 = sort(runif(80,176,180))
l = 2000-length(time) + length(time2)
time3 = purrr::accumulate(1:l, ~ .x +runif(1,0,0.5), .init = 180.1)
time = c(time, time2, time3)
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:680, ~ .x +runif(1,0,0.5), .init = 1.05)
time2 = sort(runif(80,176,180))
l = 2000-length(time) - length(time2)
time3 = purrr::accumulate(1:l, ~ .x +runif(1,0,0.5), .init = 180.1)
time = c(time, time2, time3)
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:680, ~ .x +runif(1,0,0.5), .init = 1.05)
time2 = sort(runif(80,176,180))
l = 2000-length(time) - length(time2)
time3 = purrr::accumulate(1:l, ~ .x +runif(1,0,0.5), .init = 180.1)
time = c(time, time2, time3)[1:2000]
treat = as.numeric(time<=180)
age = 44.59 - time^2*0.0008392 + 0.3905*time + rnorm(2000,0,15)
age = round(rescale(age,to= c(16,84)),0)
female = sample(c(0,1), replace = TRUE, size = 2000, prob = c(0.3,0.7))
income = age*1400 + rnorm(2000,0,10000)
income[income<0] = runif(sum(income<0),10000,20000)
sales = 125 + treat*30*(1 + -(time-259.6752)*0.005) + (income-50000)*0.00125 + rnorm(2000,0,10)
d = data.frame("id" = id,
"time" = time,
"age" = age,
"female" = female,
"income" = income,
"sales" = sales,
"treat" = treat)
ggplot(data = d, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
c = 180
ggplot(data = d, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = sales)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time)) +
geom_density()
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:680, ~ .x +runif(1,0,0.5), .init = 1.05)
time2 = sort(runif(80,176,180))
l = 2000-length(time) - length(time2)
time3 = purrr::accumulate(1:l, ~ .x +runif(1,0,0.5), .init = 180.1)
time = c(time, time2, time3)[1:2000]
treat = as.numeric(time<=180)
age = 44.59 - time^2*0.0008392 + 0.3905*time + rnorm(2000,0,15)
age = round(rescale(age,to= c(16,84)),0)
female = sample(c(0,1), replace = TRUE, size = 2000, prob = c(0.3,0.7))
income = age*1400 - 10000*treat + rnorm(2000,0,10000)
income[income<0] = runif(sum(income<0),10000,20000)
sales = 125 + treat*30*(1 + -(time-259.6752)*0.005) + (income-50000)*0.00125 + rnorm(2000,0,10)
d = data.frame("id" = id,
"time" = time,
"age" = age,
"female" = female,
"income" = income,
"sales" = sales,
"treat" = treat)
c = 180
ggplot(data = d, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = sales)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
write.csv(d, file = "sales_mod.csv", row.names = FALSE)
sales <- sales %>% mutate(dist = c-time)
lm(sales ~ dist + treat + dist*treat, data = sales)
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = max(sales$time[sales$treat==1])
sales <- sales %>% mutate(dist = c-time)
lm(sales ~ dist + treat + dist*treat, data = sales)
library(broom)
lm1 <- lm(sales ~ dist + treat + dist*treat, data = sales)
sales_aug <- broom::augment(lm1, data = sales)
names(sales_aug)
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = max(sales$time[sales$treat==1])
sales <- sales %>% mutate(dist = c-time)
lm1 <- lm(sales ~ dist + treat + dist*treat, data = sales)
sales_aug <- broom::augment(lm1, data = sales)
ggplot(data = sales, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") +
geom_line(data = filter(sales, time>c), aes(x = time, y = .fitted), color = "#F89441", fill = "#F89441") +
geom_line(data = filter(sales, time<=c), aes(x = time, y = .fitted), color = "#900DA4", fill = "#900DA4") +
theme_ipsum_fsc() +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = max(sales$time[sales$treat==1])
sales <- sales %>% mutate(dist = c-time)
lm1 <- lm(sales ~ dist + treat + dist*treat, data = sales)
sales_aug <- broom::augment(lm1, data = sales)
ggplot(data = sales_aug, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") +
geom_line(data = filter(sales_aug, time>c), aes(x = time, y = .fitted), color = "#F89441") +
geom_line(data = filter(sales_aug, time<=c), aes(x = time, y = .fitted), color = "#900DA4") +
theme_ipsum_fsc() +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = max(sales$time[sales$treat==1])
sales <- sales %>% mutate(dist = c-time)
lm1 <- lm(sales ~ dist + treat + dist*treat, data = sales)
sales_aug <- broom::augment(lm1, data = sales)
ggplot(data = sales_aug, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") +
geom_line(data = filter(sales_aug, time>c), aes(x = time, y = .fitted), color = "#F89441", lwd = 2) +
geom_line(data = filter(sales_aug, time<=c), aes(x = time, y = .fitted), color = "#900DA4", lwd = 2) +
theme_ipsum_fsc() +
#guides(fill = guide_legend(reverse = TRUE, override.aes = list(alpha = 1)), color = FALSE) +
#axis.line = element_line(colour = "dark grey"))+
theme(axis.title.x = element_text(size=16),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size=16),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_text(size = 10),legend.position="none",
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=14))
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/1_DD/sp2021_sta235_9_dd_cont.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity_blind.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity_blind.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity.html')
################################################################################
### Title: "Week 7 - Regression Discontinuity I"
### Course: STA 235
### Semester: Spring 2021
### Professor: Magdalena Bennett
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
### Load libraries
# If you don't have one of these packages installed already, you will need to
#run install.packages() line
library(tidyverse)
library(ggplot2)
library(estimatr)
library(broom)
################################################################################
################ In class examples #############################################
################ Discount by time of arrival ###################################
######################
## Group 1 ###########
######################
# You receive the sales data for the sales example we saw a couple of weeks ago
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
# Check out the data
head(sales)
# id: identification for each person
# time: time of arrival, since the store opened
# age: age of the person
# female: whether the customer is female or not
# income: average income for the customer
# sales: amount of the purchase
# treat: whether the person received a discount or not (e.g. was within the first 1,000 customers)
# Task 1) Create a plot with the running variable in the x-axis and the treatment variable in the y-axis.
# Questions to answer:
# i) What is the running variable? Can you obtain the cutoff for treatment assignment?
# ii) What does this plot tells you?
library(ggplot2)
# This is the plot you had to do
ggplot(data = d, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
# If you don't want all markers to be aligned in the same line (it can be difficult to observe),
# you can add a random jitter (move them slightly up and down), so you can see more of the data.
# This is a good trick for any time you have data on the same line.
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = max(sales$time[sales$treat==1])
pos = position_jitter(width = 0, height = 0.1, seed = 1234) #I only move them slightly (0.1) up and down. I set a seed so it's reproducible.
ggplot(data = sales, aes(x = time, y = treat)) +
geom_point(data = filter(sales, time<=c), size = 5, pch = 21, color = "white", fill="#900DA4", position = pos) + #I filter the data so I can color units below and above the cutoff
geom_point(data = filter(sales, time>c), size = 5, pch = 21, color = "white", fill="#F89441", position = pos) +
theme_bw()
ggplot(data = d, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
# This is the plot that was asked
ggplot(data = sales, aes(x = time, y = sales)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
sales_mod <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales_mod.csv")
# The difference here is that the discount was given to all the customers that arrived before noon (the store opened at 9.00am)
ggplot(data = sales_mod, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
ggplot(data = sales, aes(x = time)) + geom_density()
plot(density(sales_mod$time))
ggplot(data = sales_mod, aes(x = time)) +
geom_density(data = filter(sales_mod, time<=180), color = "#F89441", lwd = 1.5) +
geom_density(data = filter(sales_mod, time>180), color = "#900DA4", lwd = 1.5)
library(rddensity)
?rddensity
rddensity(sales_mod$time, c = 180)
rd <- rddensity(sales_mod$time, c = 180)
plot(rd)
?`rddensity-package`
rdplotdensity(sales_mod$time, c = 180)
?rdplotdensity
rd <- rddensity(sales_mod, c = 180)
rdplotdensity(rd)
rd <- rddensity(sales_mod$time, c = 180)
rdplotdensity(rd, sales_mod$time)
rd <- rddensity(sales_mod$time = 180) # First we test the smoothness of the density function in the cutoff
rdplotdensity(rd, sales_mod$time, plotRange = ) # we can plot this
?rddensity
# Let's look at the densities! We want to see if there's manipulation
library(rddensity) # We will be using this package a lot next class (the same with rdrobust)
rd <- rddensity(sales_mod$time, c=180) # First we test the smoothness of the density function in the cutoff
rdplotdensity(rd, sales_mod$time, plotRange = c(160,200)) # we can plot this
rd <- rddensity(sales$time, c=max(sales$time[sales$treat==1]))
rdplotdensity(rd, sales$time)
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = max(sales$time[sales$treat==1])
sales <- sales %>% mutate(dist = c-time) # We are going to create a distance variable (distance to the cutoff)
lm1 <- lm(sales ~ dist + treat + dist*treat, data = sales) # Then we will fit a linear model, allowing for different intercept and slopes for the two groups.
sales_aug <- broom::augment(lm1, data = sales)
ggplot(data = sales_aug, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") +
geom_line(data = filter(sales_aug, time>c), aes(x = time, y = .fitted), color = "#F89441", lwd = 2) +
geom_line(data = filter(sales_aug, time<=c), aes(x = time, y = .fitted), color = "#900DA4", lwd = 2) +
theme_bw()
lm2 <- lm(sales ~ dist + I(dist^2) + treat + dist*treat + treat*I(dist^2), data = sales) # Remember that we need to include both the linear and quadratic term of the running variable
sales_aug <- broom::augment(lm2, data = sales)
ggplot(data = sales_aug, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") +
geom_line(data = filter(sales_aug, time>c), aes(x = time, y = .fitted), color = "#F89441", lwd = 2) +
geom_line(data = filter(sales_aug, time<=c), aes(x = time, y = .fitted), color = "#900DA4", lwd = 2) +
theme_bw()
?transform
library(ggplot2)
library(gridExtra)
library(hrbrthemes)
library(firasans)
jitt <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/jitts.csv")
jitt2 <- as.data.frame(cbind(table(jitt$pace),rownames(table(jitt$pace))))
names(jitt2) = c("value","pace")
jitt2$pace <- factor(jitt2$pace,levels = c("Too slow-paced","Pace was ok","Too fast-paced"))
jitt3 <- as.data.frame(cbind(table(jitt$pace),rownames(table(jitt$useful))))
names(jitt3) = c("value","useful")
jitt3$useful <- factor(jitt3$useful,levels = c("1","2","3","4","5"))
cols1 = c("#5601A4","#BF3984","#F89441","#FCCE25","#0D0887")
cols2 = c("#0D0887","#BF3984","#FCCE25")
ggplot(data = jitt2, aes(x="", y=as.numeric(value),fill=pace)) +
geom_bar(lwd=1.5, stat="identity", color="white") +
coord_polar("y",start = 0)+
scale_fill_manual(values=cols2, name = "Pace") +
theme_void()+
theme_ipsum_fsc() + #plain
ggtitle("How do you find the pace of the class?")+
#ylim(0,5)+
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line = element_blank())+
theme(axis.title.x = element_blank(),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.title.y = element_blank(),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_blank(),legend.position="right",
legend.title = element_text(size=12),
legend.text = element_text(size=10),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=12))
ggplot(data = jitt3, aes(x="", y=as.numeric(value),fill=useful)) +
geom_bar(lwd=1.5, stat="identity", color="white") +
coord_polar("y",start = 0)+
scale_fill_manual(values=cols1, name = "Useful") +
theme_void()+
theme_ipsum_fsc() + #plain
ggtitle("How useful do you find live R coding?")+
#ylim(0,5)+
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line = element_blank())+
theme(axis.title.x = element_blank(),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.title.y = element_blank(),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_blank(),legend.position="right",
legend.title = element_text(size=12),
legend.text = element_text(size=10),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=12))
table(jitt$useful)
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/1_DD/sp2021_sta235_9_dd_cont.html')
