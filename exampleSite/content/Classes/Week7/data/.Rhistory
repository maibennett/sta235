geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
######################
## Group 3 ###########
######################
# Task 1) Create a plot with the running variable in the x-axis and income in the y-axis.
# Questions to answer:
# i) What is the running variable? Can you obtain the cutoff for treatment assignment from your data?
# ii) What does this plot tells you?
# Task 2) Identify your cutoff score and assign it to c <-
# Add to your previous plot a fitted smooth line for each side of the cutoff adding to your previous code the following:
# geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red")
# and geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = sales, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
######################
## Group 4 ###########
######################
# You receive the sales data for the sales example we saw a couple of weeks ago
sales_mod <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales_mod.csv")
# The difference here is that the discount was given to all the customers that arrived before noon (the store opened at 9.00am)
c = 180
ggplot(data = sales_mod, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
# Question: If there's a discontinuity here, is it a problem? Why?
# Question: Can you do the same thing for age? What do you find?
# Let's look at the densities! We want to see if there's manipulation
library(rddensity) # We will be using this package a lot next class (the same with rdrobust)
rd <- rddensity(sales_mod$time, c=180) # First we test the smoothness of the density function in the cutoff
rdplotdensity(rd, sales_mod$time) # we can plot this
# Let's look at the other example, to see if there's manipulation there:
rd <- rddensity(sales$time, c=max(sales$time[sales$treat==1]))
rdplotdensity(rd, sales$time)
library(purrr)
library(wakefield)
library(scales)
set.seed(100)
n = 2000
id = seq(1,2000)
time = purrr::accumulate(1:680, ~ .x +runif(1,0,0.5), .init = 1.05)
time2 = sort(runif(112,176,180))
l = 2000-length(time) - length(time2)
time3 = purrr::accumulate(1:l, ~ .x +runif(1,0,0.5), .init = 180.1)
time = c(time, time2, time3)[1:2000]
treat = as.numeric(time<=180)
age = 44.59 - time^2*0.0008392 + 0.3905*time + rnorm(2000,0,15)
age = round(rescale(age,to= c(16,84)),0)
female = sample(c(0,1), replace = TRUE, size = 2000, prob = c(0.3,0.7))
income = age*1400 - 10000*treat + rnorm(2000,0,10000)
income[income<0] = runif(sum(income<0),10000,20000)
sales = 125 + treat*30*(1 + -(time-259.6752)*0.005) + (income-50000)*0.00125 + rnorm(2000,0,10)
d = data.frame("id" = id,
"time" = time,
"age" = age,
"female" = female,
"income" = income,
"sales" = sales,
"treat" = treat)
c = 180
ggplot(data = d, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = sales)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(d, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(d, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = d, aes(x = time)) +
geom_density()
setwd("C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/data")
write.csv(d, file = "sales_mod.csv", row.names = FALSE)
################################################################################
### Title: "Week 7 - Regression Discontinuity I"
### Course: STA 235
### Semester: Spring 2021
### Professor: Magdalena Bennett
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
### Load libraries
# If you don't have one of these packages installed already, you will need to
#run install.packages() line
library(tidyverse)
library(ggplot2)
library(estimatr)
library(broom)
################################################################################
################ In class examples #############################################
################ Discount by time of arrival ###################################
######################
## Group 1 ###########
######################
# You receive the sales data for the sales example we saw a couple of weeks ago
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
# Check out the data
head(sales)
# id: identification for each person
# time: time of arrival, since the store opened
# age: age of the person
# female: whether the customer is female or not
# income: average income for the customer
# sales: amount of the purchase
# treat: whether the person received a discount or not (e.g. was within the first 1,000 customers)
# Task 1) Create a plot with the running variable in the x-axis and the treatment variable in the y-axis.
# Questions to answer:
# i) What is the running variable? Can you obtain the cutoff for treatment assignment?
# ii) What does this plot tells you?
# Task 2) Identify your cutoff score and assign it to c <-
# Add to your previous plot a fitted smooth line for each side of the cutoff adding to your previous code the following:
# geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red")
# and geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
# This is the plot you had to do
ggplot(data = sales, aes(x = time, y = treat)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
# If you don't want all markers to be aligned in the same line (it can be difficult to observe),
# you can add a random jitter (move them slightly up and down), so you can see more of the data.
# This is a good trick for any time you have data on the same line.
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
c = max(sales$time[sales$treat==1])
pos = position_jitter(width = 0, height = 0.1, seed = 1234) #I only move them slightly (0.1) up and down. I set a seed so it's reproducible.
ggplot(data = sales, aes(x = time, y = treat)) +
geom_point(data = filter(sales, time<=c), size = 5, pch = 21, color = "white", fill="#900DA4", position = pos) + #I filter the data so I can color units below and above the cutoff
geom_point(data = filter(sales, time>c), size = 5, pch = 21, color = "white", fill="#F89441", position = pos) +
theme_bw()
# Question: If you don't want to use the filter function, can you create this same plot using other techniques we have seen?
######################
## Group 2 ###########
######################
# Task 1) Create a plot with the running variable in the x-axis and sales in the y-axis.
# Questions to answer:
# i) What is the running variable? Can you obtain the cutoff for treatment assignment from your data?
# ii) What does this plot tells you?
# Task 2) Identify your cutoff score and assign it to c <-
# Add to your previous plot a fitted smooth line for each side of the cutoff adding to your previous code the following:
# geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red")
# and geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
# This is the plot that was asked
ggplot(data = sales, aes(x = time, y = sales)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = sales)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
######################
## Group 3 ###########
######################
# Task 1) Create a plot with the running variable in the x-axis and income in the y-axis.
# Questions to answer:
# i) What is the running variable? Can you obtain the cutoff for treatment assignment from your data?
# ii) What does this plot tells you?
# Task 2) Identify your cutoff score and assign it to c <-
# Add to your previous plot a fitted smooth line for each side of the cutoff adding to your previous code the following:
# geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red")
# and geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue")
ggplot(data = sales, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
######################
## Group 4 ###########
######################
# You receive the sales data for the sales example we saw a couple of weeks ago
sales_mod <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales_mod.csv")
# The difference here is that the discount was given to all the customers that arrived before noon (the store opened at 9.00am)
c = 180
ggplot(data = sales_mod, aes(x = time, y = income)) +
geom_point() +
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "red", fill = "red") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "blue", fill = "blue") +
theme_bw()
ggplot(data = sales, aes(x = time, y = income)) +
geom_point(size = 5, pch = 21, color = "white", fill="grey") + # I use a grey color for the observations and color the fitted functions two different colors
geom_smooth(data = filter(sales, time>c), method = "loess", se=TRUE, color = "#F89441", fill = "#F89441") +
geom_smooth(data = filter(sales, time<=c), method = "loess", se=TRUE, color = "#900DA4", fill = "#900DA4") +
theme_bw()
# Question: If there's a discontinuity here, is it a problem? Why?
# Question: Can you do the same thing for age? What do you find?
# Let's look at the densities! We want to see if there's manipulation
library(rddensity) # We will be using this package a lot next class (the same with rdrobust)
rd <- rddensity(sales_mod$time, c=180) # First we test the smoothness of the density function in the cutoff
rdplotdensity(rd, sales_mod$time) # we can plot this
# Let's look at the other example, to see if there's manipulation there:
rd <- rddensity(sales$time, c=max(sales$time[sales$treat==1]))
rdplotdensity(rd, sales$time)
# We can also check an histogram to see what's going on:
ggplot(adta = sales_mod, aes(x = time)) +
geom_hist()
?geom_histogram
ggplot(adta = sales_mod, aes(x = time)) +
geom_histogram()
ggplot(data = sales_mod, aes(x = time)) +
geom_histogram()
ggplot(data = sales_mod, aes(x = time)) +
geom_histogram(fill="grey", color = "white") +
theme_bw()
ggplot(data = sales_mod, aes(x = time)) +
geom_histogram(fill="grey", color = "white") +
geom_vline(aes(xintercept = 180), color = "#900DA4", lwt=2, lwd=1.4)
theme_bw()
ggplot(data = sales_mod, aes(x = time)) +
geom_histogram(fill="grey", color = "white", bins = 100) +
geom_vline(aes(xintercept = 180), color = "#900DA4", lwt=2, lwd=1.4)
theme_bw()
ggplot(data = sales_mod, aes(x = time)) +
geom_histogram(fill="grey", color = "white", bins = 50) +
geom_vline(aes(xintercept = 180), color = "#900DA4", lwt=2, lwd=1.4)
theme_bw()
ggplot(data = sales_mod, aes(x = time)) +
geom_histogram(fill="grey", color = "white", bins = 60) +
geom_vline(aes(xintercept = 180), color = "#900DA4", lwt=2, lwd=1.4)
theme_bw()
library(ggplot2)
library(gridExtra)
library(hrbrthemes)
library(firasans)
jitt <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/jitt_rd.csv")
jitt2 <- as.data.frame(cbind(table(jitt$external),rownames(table(jitt$external))))
names(jitt2) = c("value","bin")
jitt2$bin <- factor(jitt2$bin,levels = c("0","1"))
jitt2$bin <- revalue(jitt2$bin, c("0"="No", "1"="Yes"))
cols1 = c("#FCCE25","#0D0887")
ggplot(data = jitt2, aes(x="", y=as.numeric(value),fill=bin)) +
geom_bar(lwd=1.5, stat="identity", color="white") +
coord_polar("y",start = 0)+
scale_fill_manual(values=cols1, name = "") +
theme_void()+
theme_ipsum_fsc() + #plain
#ggtitle("How do you find the pace of the class?")+
#ylim(0,5)+
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line = element_blank())+
theme(axis.title.x = element_blank(),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.title.y = element_blank(),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_blank(),legend.position="right",
legend.title = element_text(size=12),
legend.text = element_text(size=10),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=12))
library(ggplot2)
library(gridExtra)
library(hrbrthemes)
library(firasans)
jitt <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/jitt_rd.csv")
jitt2 <- as.data.frame(cbind(table(jitt$external),rownames(table(jitt$external))))
names(jitt2) = c("value","bin")
jitt2$bin <- factor(jitt2$bin,levels = c("0","1"))
jitt2$bin <- revalue(jitt2$bin, c("0"="No", "1"="Yes"))
cols1 = c("#FCCE25","#F89441")
ggplot(data = jitt2, aes(x="", y=as.numeric(value),fill=bin)) +
geom_bar(lwd=1.5, stat="identity", color="white") +
coord_polar("y",start = 0)+
scale_fill_manual(values=cols1, name = "") +
theme_void()+
theme_ipsum_fsc() + #plain
#ggtitle("How do you find the pace of the class?")+
#ylim(0,5)+
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line = element_blank())+
theme(axis.title.x = element_blank(),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.title.y = element_blank(),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_blank(),legend.position="right",
legend.title = element_text(size=12),
legend.text = element_text(size=10),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=12))
library(ggplot2)
library(gridExtra)
library(hrbrthemes)
library(firasans)
library(plyr)
jitt <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/jitt_rd.csv")
jitt2 <- as.data.frame(cbind(table(jitt$external),rownames(table(jitt$external))))
names(jitt2) = c("value","bin")
jitt2$bin <- factor(jitt2$bin,levels = c("0","1"))
jitt2$bin <- revalue(jitt2$bin, c("0"="No", "1"="Yes"))
cols1 = c("#FCCE25","#F89441")
ggplot(data = jitt2, aes(x="", y=as.numeric(value),fill=bin)) +
geom_bar(lwd=1.5, stat="identity", color="white") +
coord_polar("y",start = 0)+
scale_fill_manual(values=cols1, name = "") +
theme_void()+
theme_ipsum_fsc() + #plain
#ggtitle("How do you find the pace of the class?")+
#ylim(0,5)+
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line = element_blank())+
theme(axis.title.x = element_blank(),#margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x = element_blank(),
axis.title.y = element_blank(),#margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.text.y = element_blank(),legend.position="right",
legend.title = element_text(size=12),
legend.text = element_text(size=10),
legend.background = element_rect(fill="white",colour ="white"),
title = element_text(size=12))
library(dplyr)
?revalue
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity_blind.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity.html')
pagedown::chrome_print('C:/Users/mc72574/Dropbox/Hugo/Sites/sta235/exampleSite/content/Classes/Week7/2_RD/sp2021_sta235_10_regression_discontinuity_blind.html')
################################################################################
### Title: "Week 6 - Natural Experiments and Diff-in-Diff"
### Course: STA 235
### Semester: Spring 2021
### Professor: Magdalena Bennett
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
### Load libraries
# If you don't have one of these packages installed already, you will need to
#run install.packages() line
library(tidyverse)
library(ggplot2)
library(generics)
library(estimatr)
library(designmatch)
library(MatchIt)
library(broom)
library(vtable) #Useful package to visualize data
library(cobalt)
library(bacondecomp) # for goodman-bacon decomposition
# this shows popularity over time, including the release of one of her albums (on the week of 07/19/2020 for the west coast, and 08/09/2020 for the rest).
swift <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week6/data/swift.csv")
# Data shows for each state and week of the year (past 12 months), a popularity index, whether the state belongs to the "west coast" glitch or not, and the week the album was released in each place.
head(swift)
# Let's look at the states
table(swift$state)
# Let's create some additional variables:
swift <- swift %>% mutate(post1 = ifelse(dates >= as.Date("2020-07-19"), 1, 0), #This is when the glitch happen
post2 = ifelse(dates >= as.Date("2020-08-09"), 1, 0)) #The the album became available for almost everyone
swift <- swift %>% mutate(treat = ifelse(west_coast==1 & post1==1, 1,
ifelse(west_coast==0 & post2==1 & controls == 0, 1, 0)),# Look closely at this condition! What is does is: 1) If the state is in the west coast and it's after 07/19, treat = 1, then if west_coast = 0 and it's after 08/09, treat = 1. It will be 0 in all other cases.
period = factor(ifelse(post1==0 & post2==0, 0, ifelse(post1==1 & post2==0, 1, 2))), #Time 0 is before the album was available to anyone, time 1 is after it was available for the 1st group but not the 2nd, time 2 is when it's available for everyone.
group = factor(ifelse(controls==1,0,ifelse(west_coast==1,1,2))), # Group 0 is the ones that never receive it, group 1 is the ones that receive it early, group 2 the ones that receive it late.
date_num = as.numeric(as.Date(dates)))
# this shows popularity over time, including the release of one of her albums (on the week of 07/19/2020 for the west coast, and 08/09/2020 for the rest).
swift <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week6/data/swift.csv")
# Data shows for each state and week of the year (past 12 months), a popularity index, whether the state belongs to the "west coast" glitch or not, and the week the album was released in each place.
head(swift)
# Let's look at the states
table(swift$state)
# Let's create some additional variables:
swift <- swift %>% mutate(post1 = ifelse(dates >= as.Date("2020-07-19"), 1, 0), #This is when the glitch happen
post2 = ifelse(dates >= as.Date("2020-08-09"), 1, 0)) #The the album became available for almost everyone
# Clears console
cat("\014")
head(swift)
swift <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week6/data/swift.csv")
# Data shows for each state and week of the year (past 12 months), a popularity index, whether the state belongs to the "west coast" glitch or not, and the week the album was released in each place.
head(swift)
# Let's look at the states
table(swift$state)
# Let's create some additional variables:
swift <- swift %>% mutate(post1 = ifelse(dates >= as.Date("2020-07-19"), 1, 0), #This is when the glitch happen
post2 = ifelse(dates >= as.Date("2020-08-09"), 1, 0)) #The the album became available for almost everyone
# Let's assume that "treatment" is having the album available. Then,
swift <- swift %>% mutate(treat = ifelse(west_coast==1 & post1==1, 1,
ifelse(west_coast==0 & post2==1 & controls == 0, 1, 0)),# Look closely at this condition! What is does is: 1) If the state is in the west coast and it's after 07/19, treat = 1, then if west_coast = 0 and it's after 08/09, treat = 1. It will be 0 in all other cases.
period = factor(ifelse(post1==0 & post2==0, 0, ifelse(post1==1 & post2==0, 1, 2))), #Time 0 is before the album was available to anyone, time 1 is after it was available for the 1st group but not the 2nd, time 2 is when it's available for everyone.
group = factor(ifelse(controls==1,0,ifelse(west_coast==1,1,2))), # Group 0 is the ones that never receive it, group 1 is the ones that receive it early, group 2 the ones that receive it late.
date_num = as.numeric(as.Date(dates)))
# Let's plot the data!
swift %>% dplyr::select(group, dates, popularity) %>%
group_by(group, dates) %>% summarise_all(mean) %>% # We first group our data (an summarize it) by date and whether the state was part of the glitch or not
ggplot(data = ., aes(x = as.Date(dates), y = popularity, color = factor(group), group = factor(group))) + # Then we plot the data
geom_line(lwd = 1.3) +
scale_color_manual(values = c("#FCCE25","#900DA4","#F89441"), name = "Group", label = c("0" = "Weird", "1" = "West Coast", "2" = "Non west coast") ) + # We include personalized colors (to not use the default ones)
geom_vline(aes(xintercept=as.Date("2020-07-19")), lty = 2, lwd=1.1, color = "#5601A4") + #Release of the album in the west coast
geom_vline(aes(xintercept=as.Date("2020-08-09")), lty = 2, lwd=1.1, color = "#E16462") + #Release of the album everywhere else
labs(x = "Date", y = "Popularity Index", title = "Taylor Swift's popularity in the past 12 months")+
theme_bw()+
theme(plot.title = element_text(size=16))+
scale_x_date(date_labels = "%m-%Y", date_breaks = "2 month")
# Let's look at two states, like CA and PA: (uncomment to run)
#swift %>% filter(state == "California") # Variable treat looks food
#swift %>% filter(state == "Pennsylvania") # Variable treat looks food
## What if we just ran the TWFE model?
summary(lm(popularity ~ factor(group) + factor(period) + treat, data = swift))
###############################
## Ok, let's do the Goodman-Bacon Decomposition:
df_bacon <- bacon(popularity ~ treat, data = swift, id_var = "state", time_var = "date_num") # Make sure the time_var is numeric
df_bacon # Question: Can you interpret these effects looking at the popularity plot?
coef_bacon <- sum(df_bacon$estimate * df_bacon$weight)
print(paste("Weighted sum of decomposition =", round(coef_bacon, 4))) #It's the same as the TWFE model!
df_bacon <- bacon(popularity ~ treat, data = swift, id_var = "group", time_var = "date_num")
# Clears console
cat("\014")
cat("\014")
head(swift)
swift <- swift %>% mutate(treat = ifelse(west_coast==1 & post1==1, 1,
ifelse(west_coast==0 & controls==0 & post2==1,1,0)),
group = ifelse(controls==1, 0, ifelse(west_coast==1,1,2)),
period = ifelse(post1==0 & post2==0, 0, ifelse(post1==1 & post2==0, 1, 2)),
date_num = as.numeric(as.Date(dates)))
summary(lm(popularity ~ factor(period) + factor(group) + treat, data = swift))
df_bacon <- bacon(popularity ~ treat, data = swift, id_var = "state", time_var = "date_num")
coef_bacon <- sum(df_bacon$estimate*df_bacon$weight)
coef_bacon
sales <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week7/data/sales.csv")
################################################################################
### Title: "Week 6 - Natural Experiments and Diff-in-Diff"
### Course: STA 235
### Semester: Spring 2021
### Professor: Magdalena Bennett
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
### Load libraries
# If you don't have one of these packages installed already, you will need to
#run install.packages() line
library(tidyverse)
library(ggplot2)
library(generics)
library(estimatr)
library(designmatch)
library(MatchIt)
library(broom)
library(vtable) #Useful package to visualize data
library(cobalt)
library(bacondecomp) # for goodman-bacon decomposition
# this shows popularity over time, including the release of one of her albums (on the week of 07/19/2020 for the west coast, and 08/09/2020 for the rest).
swift <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Classes/Week6/data/swift.csv")
# Data shows for each state and week of the year (past 12 months), a popularity index, whether the state belongs to the "west coast" glitch or not, and the week the album was released in each place.
head(swift)
# Let's look at the states
table(swift$state)
# Let's create some additional variables:
swift <- swift %>% mutate(post1 = ifelse(dates >= as.Date("2020-07-19"), 1, 0), #This is when the glitch happen
post2 = ifelse(dates >= as.Date("2020-08-09"), 1, 0)) #The the album became available for almost everyone
# Clears console
cat("\014")
# Clears console
cat("\014")
head(swift)
# Clears console
cat("\014")
# Clears console
cat("\014")
head(swift)
swift <- swift %>% mutate(period = ifelse(post1==0 & post2==0, 0,
ifelse(post1==1 & post2==0, 1, 2)),
group = ifelse(controls==1, 0,
ifelse(west_coast==1, 1, 2)),
treat = ifelse(west_coast==1 & post1==1, 1,
ifelse(west_coast==0 & controls==0 & post2==1,1,0)),
date_num = as.numeric(as.Date(dates)))
head(swift)
summary(lm(popularity ~ factor(group) + factor(period) + treat, data=swift))
df_bacon <- bacon(popularity ~ treat, data = swift, id_var = "state", time_var = "date_num")
sum(df_bacon$estimate*df_bacon$weight)
?filter
